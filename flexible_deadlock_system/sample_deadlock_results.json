{
  "timestamp": 1749040125.134786,
  "total_deadlocks": 7,
  "deadlocks": [
    {
      "description": "parallel_execution between Process Order and Update Order Status",
      "severity": "MEDIUM",
      "confidence": 0.7,
      "strategy_name": "parallel_execution",
      "shared_resources": [
        "orders",
        "column:status"
      ],
      "node1_id": "task_a",
      "node2_id": "task_d",
      "node1_name": "Process Order",
      "node2_name": "Update Order Status",
      "conflict_type": "parallel_execution",
      "details": {
        "gateway_type": "AND_SPLIT",
        "execution_type": "guaranteed_parallel",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "status"
        ],
        "write_write_conflict": true,
        "write_read_conflict": true,
        "conflict_score": 1.0,
        "operations": {
          "node1": [
            "UPDATE",
            "SELECT"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement consistent table access ordering: orders",
        "Use optimistic locking or row-level locking to reduce contention",
        "Consider implementing retry logic with exponential backoff",
        "Use READ_COMMITTED isolation level or NOLOCK hints for read operations",
        "Monitor for deadlock events and implement automatic retry mechanisms"
      ]
    },
    {
      "description": "parallel_execution between Process Payment and Update Order Status",
      "severity": "MEDIUM",
      "confidence": 0.7,
      "strategy_name": "parallel_execution",
      "shared_resources": [
        "orders",
        "column:id"
      ],
      "node1_id": "task_c",
      "node2_id": "task_d",
      "node1_name": "Process Payment",
      "node2_name": "Update Order Status",
      "conflict_type": "parallel_execution",
      "details": {
        "gateway_type": "AND_SPLIT",
        "execution_type": "guaranteed_parallel",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "id"
        ],
        "write_write_conflict": true,
        "write_read_conflict": false,
        "conflict_score": 0.9000000000000001,
        "operations": {
          "node1": [
            "UPDATE"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement consistent table access ordering: orders",
        "Use optimistic locking or row-level locking to reduce contention",
        "Consider implementing retry logic with exponential backoff",
        "Monitor for deadlock events and implement automatic retry mechanisms"
      ]
    },
    {
      "description": "convergent_and_join between Process Order and Update Order Status",
      "severity": "MEDIUM",
      "confidence": 0.7,
      "strategy_name": "gateway_specific",
      "shared_resources": [
        "orders",
        "column:status"
      ],
      "node1_id": "task_a",
      "node2_id": "task_d",
      "node1_name": "Process Order",
      "node2_name": "Update Order Status",
      "conflict_type": "convergent_and_join",
      "details": {
        "description": "Convergent paths deadlock at AND_JOIN",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "status"
        ],
        "write_write_conflict": true,
        "write_read_conflict": true,
        "conflict_score": 1.0,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "UPDATE",
            "SELECT"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement proper synchronization at join points",
        "Use compensation patterns for failed transactions",
        "Consider using saga patterns for long-running transactions",
        "Implement consistent access order for tables: ['orders']",
        "Monitor gateway execution patterns for unexpected parallel behavior",
        "Implement proper error handling and retry mechanisms",
        "Use process-level locks for critical sections"
      ]
    },
    {
      "description": "convergent_and_join between Process Payment and Update Order Status",
      "severity": "MEDIUM",
      "confidence": 0.7,
      "strategy_name": "gateway_specific",
      "shared_resources": [
        "orders",
        "column:id"
      ],
      "node1_id": "task_c",
      "node2_id": "task_d",
      "node1_name": "Process Payment",
      "node2_name": "Update Order Status",
      "conflict_type": "convergent_and_join",
      "details": {
        "description": "Convergent paths deadlock at AND_JOIN",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "id"
        ],
        "write_write_conflict": true,
        "write_read_conflict": false,
        "conflict_score": 0.9000000000000001,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "UPDATE"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement proper synchronization at join points",
        "Use compensation patterns for failed transactions",
        "Consider using saga patterns for long-running transactions",
        "Implement consistent access order for tables: ['orders']",
        "Monitor gateway execution patterns for unexpected parallel behavior",
        "Implement proper error handling and retry mechanisms",
        "Use process-level locks for critical sections"
      ]
    },
    {
      "description": "resource_contention_write_write between Process Order and Process Payment",
      "severity": "CRITICAL",
      "confidence": 1.0,
      "strategy_name": "resource_contention",
      "shared_resources": [
        "orders"
      ],
      "node1_id": "task_a",
      "node2_id": "task_c",
      "node1_name": "Process Order",
      "node2_name": "Process Payment",
      "conflict_type": "resource_contention_write_write",
      "details": {
        "dependency_type": "write_write",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [],
        "write_write_conflict": true,
        "write_read_conflict": true,
        "conflict_score": 0.7999999999999999,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "UPDATE",
            "SELECT"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement optimistic concurrency control",
        "Use row-level locking instead of table locks",
        "Consider partitioning data to reduce contention",
        "Monitor deadlock frequency and adjust timeout values"
      ]
    },
    {
      "description": "resource_contention_write_write between Process Order and Update Order Status",
      "severity": "CRITICAL",
      "confidence": 1.0,
      "strategy_name": "resource_contention",
      "shared_resources": [
        "orders",
        "column:status"
      ],
      "node1_id": "task_a",
      "node2_id": "task_d",
      "node1_name": "Process Order",
      "node2_name": "Update Order Status",
      "conflict_type": "resource_contention_write_write",
      "details": {
        "dependency_type": "write_write",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "status"
        ],
        "write_write_conflict": true,
        "write_read_conflict": true,
        "conflict_score": 1.0,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "UPDATE",
            "SELECT"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement optimistic concurrency control",
        "Use row-level locking instead of table locks",
        "Consider partitioning data to reduce contention",
        "Monitor deadlock frequency and adjust timeout values"
      ]
    },
    {
      "description": "resource_contention_write_write between Process Payment and Update Order Status",
      "severity": "CRITICAL",
      "confidence": 1.0,
      "strategy_name": "resource_contention",
      "shared_resources": [
        "orders",
        "column:id"
      ],
      "node1_id": "task_c",
      "node2_id": "task_d",
      "node1_name": "Process Payment",
      "node2_name": "Update Order Status",
      "conflict_type": "resource_contention_write_write",
      "details": {
        "dependency_type": "write_write",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "id"
        ],
        "write_write_conflict": true,
        "write_read_conflict": false,
        "conflict_score": 0.9000000000000001,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "UPDATE"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement optimistic concurrency control",
        "Use row-level locking instead of table locks",
        "Consider partitioning data to reduce contention",
        "Monitor deadlock frequency and adjust timeout values"
      ]
    }
  ]
}