{
  "timestamp": 1749042800.2166808,
  "total_deadlocks": 3,
  "deadlocks": [
    {
      "description": "resource_contention_write_write between task_a and task_b",
      "severity": "CRITICAL",
      "confidence": 1.0,
      "strategy_name": "resource_contention",
      "shared_resources": [
        "orders",
        "column:id"
      ],
      "node1_id": "task_a",
      "node2_id": "task_b",
      "node1_name": "task_a",
      "node2_name": "task_b",
      "conflict_type": "resource_contention_write_write",
      "details": {
        "dependency_type": "write_write",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "id"
        ],
        "write_write_conflict": true,
        "write_read_conflict": true,
        "conflict_score": 1.0,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "SELECT",
            "UPDATE"
          ],
          "node2": [
            "UPDATE",
            "INSERT"
          ]
        }
      },
      "recommendations": [
        "Implement optimistic concurrency control",
        "Use row-level locking instead of table locks",
        "Consider partitioning data to reduce contention",
        "Monitor deadlock frequency and adjust timeout values"
      ]
    },
    {
      "description": "resource_contention_write_write between task_a and task_d",
      "severity": "CRITICAL",
      "confidence": 1.0,
      "strategy_name": "resource_contention",
      "shared_resources": [
        "orders",
        "column:id",
        "column:status"
      ],
      "node1_id": "task_a",
      "node2_id": "task_d",
      "node1_name": "task_a",
      "node2_name": "task_d",
      "conflict_type": "resource_contention_write_write",
      "details": {
        "dependency_type": "write_write",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "id",
          "status"
        ],
        "write_write_conflict": true,
        "write_read_conflict": true,
        "conflict_score": 1.0,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "SELECT",
            "UPDATE"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement optimistic concurrency control",
        "Use row-level locking instead of table locks",
        "Consider partitioning data to reduce contention",
        "Monitor deadlock frequency and adjust timeout values"
      ]
    },
    {
      "description": "resource_contention_write_write between task_b and task_d",
      "severity": "CRITICAL",
      "confidence": 1.0,
      "strategy_name": "resource_contention",
      "shared_resources": [
        "orders",
        "column:id"
      ],
      "node1_id": "task_b",
      "node2_id": "task_d",
      "node1_name": "task_b",
      "node2_name": "task_d",
      "conflict_type": "resource_contention_write_write",
      "details": {
        "dependency_type": "write_write",
        "table_conflicts": [
          "orders"
        ],
        "column_conflicts": [
          "id"
        ],
        "write_write_conflict": true,
        "write_read_conflict": false,
        "conflict_score": 0.9000000000000001,
        "mutually_exclusive": false,
        "operations": {
          "node1": [
            "UPDATE",
            "INSERT"
          ],
          "node2": [
            "UPDATE"
          ]
        }
      },
      "recommendations": [
        "Implement optimistic concurrency control",
        "Use row-level locking instead of table locks",
        "Consider partitioning data to reduce contention",
        "Monitor deadlock frequency and adjust timeout values"
      ]
    }
  ]
}