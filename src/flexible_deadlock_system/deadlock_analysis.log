2025-06-05 10:14:20,561 - __main__ - INFO - Starting Flexible Deadlock Detection System...
2025-06-05 10:14:20,561 - __main__ - INFO - Initializing system components...
2025-06-05 10:14:20,561 - neo4j_connector - DEBUG - Initializing Neo4jConnector with URI: bolt://localhost:7687
2025-06-05 10:14:20,562 - neo4j.pool - DEBUG - [#0000]  _: <POOL> created, direct address IPv4Address(('localhost', 7687))
2025-06-05 10:14:20,562 - neo4j_connector - DEBUG - Neo4j driver initialized successfully
2025-06-05 10:14:20,562 - sql_resource_extractor - DEBUG - Initializing SQLResourceExtractor
2025-06-05 10:14:20,562 - parallel_path_analyzer - DEBUG - Initializing ParallelPathAnalyzer
2025-06-05 10:14:20,562 - report_generator - DEBUG - Initializing ReportGenerator with output directory: results
2025-06-05 10:14:20,564 - __main__ - INFO - Testing Neo4j connection...
2025-06-05 10:14:20,564 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: neo4j
2025-06-05 10:14:20,564 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> pinning database: 'neo4j'
2025-06-05 10:14:20,564 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name='neo4j', guessed=False)
2025-06-05 10:14:20,564 - neo4j.pool - DEBUG - [#0000]  _: <POOL> trying to hand out new connection
2025-06-05 10:14:20,564 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> in: localhost:7687
2025-06-05 10:14:20,569 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> dns resolver out: [::1]:7687
2025-06-05 10:14:20,570 - neo4j.io - DEBUG - [#0000]  C: <OPEN> [::1]:7687
2025-06-05 10:14:22,636 - neo4j.io - DEBUG - [#0000]  S: <ERROR> ConnectionRefusedError 10061 'No connection could be made because the target machine actively refused it' None 10061 None
2025-06-05 10:14:22,636 - neo4j.io - DEBUG - [#0000]  C: <CLOSE> [::1]:7687
2025-06-05 10:14:22,636 - neo4j.io - DEBUG - [#0000]  S: <CONNECTION FAILED> [::1]:7687 ServiceUnavailable: Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] No connection could be made because the target machine actively refused it)
2025-06-05 10:14:22,636 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> dns resolver out: 127.0.0.1:7687
2025-06-05 10:14:22,637 - neo4j.io - DEBUG - [#0000]  C: <OPEN> 127.0.0.1:7687
2025-06-05 10:14:22,651 - neo4j.io - DEBUG - [#E9AA]  C: <MAGIC> 0x6060B017
2025-06-05 10:14:22,651 - neo4j.io - DEBUG - [#E9AA]  C: <HANDSHAKE> 0x000001FF 0x00080805 0x00020404 0x00000003
2025-06-05 10:14:22,651 - neo4j.io - DEBUG - [#E9AA]  S: <HANDSHAKE> 0x000001FF [3] 0x00040404 0x00040405 0x00020805 0x00
2025-06-05 10:14:22,651 - neo4j.io - DEBUG - [#E9AA]  C: <HANDSHAKE> 0x00000805 0x00
2025-06-05 10:14:22,652 - neo4j.io - DEBUG - [#E9AA]  C: HELLO {'user_agent': 'neo4j-python/5.28.1 Python/3.12.4-final-0 (win32)', 'bolt_agent': {'product': 'neo4j-python/5.28.1', 'platform': 'Windows 11; AMD64', 'language': 'Python/3.12.4-final-0', 'language_details': 'CPython; 3.12.4-final-0 (tags/v3.12.4:8e8a4ba, Jun  6 2024 19:30:16) [MSC v.1940 64 bit (AMD64)]'}}
2025-06-05 10:14:22,652 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> client state: CONNECTED > AUTHENTICATION
2025-06-05 10:14:22,652 - neo4j.io - DEBUG - [#E9AA]  C: LOGON {'scheme': 'basic', 'principal': 'neo4j', 'credentials': '*******'}
2025-06-05 10:14:22,652 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> client state: AUTHENTICATION > READY
2025-06-05 10:14:22,653 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'server': 'Neo4j/5.26.7', 'protocol_version': '5.8', 'connection_id': 'bolt-136', 'hints': {'connection.recv_timeout_seconds': 120, 'ssr.enabled': True}}
2025-06-05 10:14:22,653 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: CONNECTED > AUTHENTICATION
2025-06-05 10:14:22,653 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'advertised_address': 'localhost:7687'}
2025-06-05 10:14:22,653 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: AUTHENTICATION > READY
2025-06-05 10:14:22,653 - neo4j.io - DEBUG - [#E9AA]  C: RUN 'RETURN 1 as test' {} {'db': 'neo4j'}
2025-06-05 10:14:22,653 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> client state: READY > STREAMING
2025-06-05 10:14:22,654 - neo4j.io - DEBUG - [#E9AA]  C: PULL {'n': 1000}
2025-06-05 10:14:22,654 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'t_first': 0, 'fields': ['test']}
2025-06-05 10:14:22,654 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: READY > STREAMING
2025-06-05 10:14:22,655 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,655 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'bookmark': 'FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=', 'statuses': [{'gql_status': '00000', 'status_description': 'note: successful completion'}], 'type': 'r', 't_last': 0, 'db': 'neo4j'}
2025-06-05 10:14:22,655 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: STREAMING > READY
2025-06-05 10:14:22,655 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> released bolt-136
2025-06-05 10:14:22,655 - neo4j_connector - INFO - Neo4j connection test successful
2025-06-05 10:14:22,655 - __main__ - INFO - Fetching graph data from Neo4j...
2025-06-05 10:14:22,656 - neo4j_connector - DEBUG - Fetching nodes from Neo4j...
2025-06-05 10:14:22,656 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: neo4j
2025-06-05 10:14:22,656 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> pinning database: 'neo4j'
2025-06-05 10:14:22,656 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name='neo4j', guessed=False)
2025-06-05 10:14:22,656 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> picked existing connection bolt-136
2025-06-05 10:14:22,656 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-06-05 10:14:22,656 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> handing out existing connection
2025-06-05 10:14:22,656 - neo4j.io - DEBUG - [#E9AA]  C: RUN '\n                MATCH (n)\n                RETURN elementId(n) as id, labels(n) as labels, properties(n) as props\n                ' {} {'db': 'neo4j'}
2025-06-05 10:14:22,657 - neo4j.io - DEBUG - [#E9AA]  C: PULL {'n': 1000}
2025-06-05 10:14:22,657 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'t_first': 0, 'fields': ['id', 'labels', 'props']}
2025-06-05 10:14:22,657 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: READY > STREAMING
2025-06-05 10:14:22,657 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,658 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,658 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,658 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,658 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,658 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,658 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,659 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,659 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,659 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,659 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,659 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,659 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,660 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,660 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,660 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,660 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,660 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,660 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,661 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,661 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,661 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,661 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,661 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,662 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,662 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,662 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,662 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,663 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,663 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,663 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,663 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,663 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,664 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'bookmark': 'FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=', 'statuses': [{'gql_status': '00000', 'status_description': 'note: successful completion'}], 'type': 'r', 't_last': 0, 'db': 'neo4j'}
2025-06-05 10:14:22,664 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: STREAMING > READY
2025-06-05 10:14:22,664 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> released bolt-136
2025-06-05 10:14:22,664 - neo4j_connector - DEBUG - Fetching relationships from Neo4j...
2025-06-05 10:14:22,664 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: neo4j
2025-06-05 10:14:22,664 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name='neo4j', guessed=False)
2025-06-05 10:14:22,664 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> picked existing connection bolt-136
2025-06-05 10:14:22,664 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-06-05 10:14:22,665 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> handing out existing connection
2025-06-05 10:14:22,665 - neo4j.io - DEBUG - [#E9AA]  C: RUN '\n                MATCH (a)-[r]->(b)\n                RETURN elementId(a) as source_id, elementId(b) as target_id, \n                       type(r) as rel_type, properties(r) as props\n                ' {} {'db': 'neo4j', 'bookmarks': ['FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=']}
2025-06-05 10:14:22,665 - neo4j.io - DEBUG - [#E9AA]  C: PULL {'n': 1000}
2025-06-05 10:14:22,666 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'t_first': 1, 'fields': ['source_id', 'target_id', 'rel_type', 'props']}
2025-06-05 10:14:22,666 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: READY > STREAMING
2025-06-05 10:14:22,666 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,666 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,667 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,667 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,667 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,667 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,668 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,668 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,668 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,668 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,668 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,668 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,669 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,669 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,669 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,669 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,669 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,670 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,670 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,670 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,670 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,670 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,672 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,674 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,674 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,674 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,674 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,675 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,675 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,675 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,675 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,675 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,676 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,676 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,676 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,676 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,677 - neo4j.io - DEBUG - [#E9AA]  S: RECORD * 1
2025-06-05 10:14:22,677 - neo4j.io - DEBUG - [#E9AA]  S: SUCCESS {'bookmark': 'FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=', 'statuses': [{'gql_status': '00000', 'status_description': 'note: successful completion'}], 'type': 'r', 't_last': 0, 'db': 'neo4j'}
2025-06-05 10:14:22,677 - neo4j.io - DEBUG - [#E9AA]  _: <CONNECTION> server state: STREAMING > READY
2025-06-05 10:14:22,677 - neo4j.pool - DEBUG - [#E9AA]  _: <POOL> released bolt-136
2025-06-05 10:14:22,677 - neo4j_connector - INFO - Fetched 33 nodes and 37 relationships
2025-06-05 10:14:22,677 - __main__ - INFO - Found 33 nodes and 37 relationships
2025-06-05 10:14:22,678 - __main__ - INFO - Extracting SQL resources from graph data...
2025-06-05 10:14:22,678 - sql_resource_extractor - INFO - Extracting SQL resources from graph data...
2025-06-05 10:14:22,678 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Orders SET Status = 'Processing' WHERE OrderID = @orderID AND OrderType = 'Standard'
2025-06-05 10:14:22,678 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Orders SET Status = 'Processing' WHERE OrderID = @orderID AND OrderType = 'Standard'
2025-06-05 10:14:22,685 - sql_resource_extractor - DEBUG - WHERE clause: ORDERID = @ORDERID AND ORDERTYPE = 'STANDARD'
2025-06-05 10:14:22,685 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,686 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'STANDARD', 'raw_condition': "ORDERTYPE = 'STANDARD'"}]
2025-06-05 10:14:22,686 - sql_resource_extractor - DEBUG - Extracted resources from Process Standard Order: {'tables': {'ORDERS'}, 'columns': {'ORDERTYPE', 'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'STANDARD', 'raw_condition': "ORDERTYPE = 'STANDARD'"}]}
2025-06-05 10:14:22,686 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Orders SET Status = 'Processing',CustomRequirements = @requirementsWHERE OrderID = @orderID AND OrderType = 'Custom'
2025-06-05 10:14:22,687 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Orders SET Status = 'Processing',CustomRequirements = @requirementsWHERE OrderID = @orderID AND OrderType = 'Custom'
2025-06-05 10:14:22,688 - sql_resource_extractor - DEBUG - WHERE clause: ORDERID = @ORDERID AND ORDERTYPE = 'CUSTOM'
2025-06-05 10:14:22,688 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,688 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'CUSTOM', 'raw_condition': "ORDERTYPE = 'CUSTOM'"}]
2025-06-05 10:14:22,688 - sql_resource_extractor - DEBUG - Extracted resources from Process Custom Order: {'tables': {'ORDERS'}, 'columns': {'ORDERTYPE', 'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'CUSTOM', 'raw_condition': "ORDERTYPE = 'CUSTOM'"}]}
2025-06-05 10:14:22,688 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO PurchaseRequisitions(ReqID, OrderID, RequestDate, Status, Department)VALUES (@reqID, @orderID, GETDATE(), 'New', 'Procurement')
2025-06-05 10:14:22,689 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO PurchaseRequisitions(ReqID, OrderID, RequestDate, Status, Department)VALUES (@reqID, @orderID, GETDATE(), 'New', 'Procurement')
2025-06-05 10:14:22,690 - sql_resource_extractor - DEBUG - Extracted resources from Create Purchase Requisition: {'tables': {'PURCHASEREQUISITIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:14:22,690 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO PurchaseOrders(POID, ReqID, VendorID, PODate, Status)VALUES (@poID, @reqID, @vendorID, GETDATE(), 'Draft')
2025-06-05 10:14:22,690 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO PurchaseOrders(POID, ReqID, VendorID, PODate, Status)VALUES (@poID, @reqID, @vendorID, GETDATE(), 'Draft')
2025-06-05 10:14:22,692 - sql_resource_extractor - DEBUG - Extracted resources from Generate PO Request: {'tables': {'PURCHASEORDERS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:14:22,692 - sql_resource_extractor - DEBUG - Original SQL: UPDATE OrderDetails SET InventoryStatus = 'Reserved' WHERE OrderDetailID = @orderDetailID AND ItemID = @itemID;
2025-06-05 10:14:22,692 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE OrderDetails SET InventoryStatus = 'Reserved' WHERE OrderDetailID = @orderDetailID AND ItemID = @itemID;
2025-06-05 10:14:22,694 - sql_resource_extractor - DEBUG - WHERE clause: ORDERDETAILID = @ORDERDETAILID AND ITEMID = @ITEMID
2025-06-05 10:14:22,694 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,694 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERDETAILID', 'operator': '=', 'value': '@ORDERDETAILID', 'raw_condition': "ORDERDETAILID = '@ORDERDETAILID'"}, {'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:14:22,694 - sql_resource_extractor - DEBUG - Extracted resources from Update Inventory Quantity: {'tables': {'ORDERDETAILS'}, 'columns': {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERDETAILID', 'operator': '=', 'value': '@ORDERDETAILID', 'raw_condition': "ORDERDETAILID = '@ORDERDETAILID'"}, {'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:14:22,695 - sql_resource_extractor - DEBUG - Original SQL: DECLARE @available DECIMAL(18,2);SELECT @available = RemainingBudgetFROM DepartmentBudgetsWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE()); IF @available >= @estimatedCostUPDATE DepartmentBudgetsSET AllocatedAmount = AllocatedAmount + @estimatedCost,RemainingBudget = RemainingBudget - @estimatedCostWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE());
2025-06-05 10:14:22,695 - sql_resource_extractor - DEBUG - Cleaned SQL: DECLARE @available DECIMAL(18,2);SELECT @available = RemainingBudgetFROM DepartmentBudgetsWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE()); IF @available >= @estimatedCostUPDATE DepartmentBudgetsSET AllocatedAmount = AllocatedAmount + @estimatedCost,RemainingBudget = RemainingBudget - @estimatedCostWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE());
2025-06-05 10:14:22,698 - sql_resource_extractor - DEBUG - WHERE clause: DEPARTMENTID = @DEPTID AND FISCALYEAR = YEAR(GETDATE())
2025-06-05 10:14:22,699 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,699 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]
2025-06-05 10:14:22,699 - sql_resource_extractor - DEBUG - WHERE clause: DEPARTMENTID = @DEPTID AND FISCALYEAR = YEAR(GETDATE())
2025-06-05 10:14:22,699 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,700 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}, {'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]
2025-06-05 10:14:22,700 - sql_resource_extractor - DEBUG - Extracted resources from Check Budget Availability: {'tables': {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, 'columns': {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}, {'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]}
2025-06-05 10:14:22,700 - sql_resource_extractor - DEBUG - Original SQL: SELECT po.*, v.VendorName, v.ContactPersonFROM PurchaseOrders poJOIN Vendors v ON po.VendorID = v.VendorIDWHERE po.POID = @poID
2025-06-05 10:14:22,701 - sql_resource_extractor - DEBUG - Cleaned SQL: SELECT po.*, v.VendorName, v.ContactPersonFROM PurchaseOrders poJOIN Vendors v ON po.VendorID = v.VendorIDWHERE po.POID = @poID
2025-06-05 10:14:22,702 - sql_resource_extractor - DEBUG - WHERE clause: PO.POID = @POID
2025-06-05 10:14:22,702 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,702 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]
2025-06-05 10:14:22,702 - sql_resource_extractor - DEBUG - Extracted resources from Review Purchase Details: {'tables': {'PURCHASEORDERS', 'VENDORS'}, 'columns': {'POID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}
2025-06-05 10:14:22,702 - sql_resource_extractor - DEBUG - Original SQL: SELECT i.ItemID, i.ItemName, i.CompatibilityFlags,s.SystemID, s.SystemName, s.VersionFROM Inventory iJOIN Systems s ON i.SystemID = s.SystemIDWHERE i.ItemID IN (SELECT ItemID FROM OrderDetails WHERE OrderID = @orderID)
2025-06-05 10:14:22,702 - sql_resource_extractor - DEBUG - Cleaned SQL: SELECT i.ItemID, i.ItemName, i.CompatibilityFlags,s.SystemID, s.SystemName, s.VersionFROM Inventory iJOIN Systems s ON i.SystemID = s.SystemIDWHERE i.ItemID IN (SELECT ItemID FROM OrderDetails WHERE OrderID = @orderID)
2025-06-05 10:14:22,704 - sql_resource_extractor - DEBUG - WHERE clause: I.ITEMID IN (SELECT ITEMID FROM ORDERDETAILS WHERE ORDERID = @ORDERID)
2025-06-05 10:14:22,704 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,704 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID)', 'raw_condition': "ORDERID = '@ORDERID)'"}]
2025-06-05 10:14:22,704 - sql_resource_extractor - DEBUG - Extracted resources from Verify System Compatibility: {'tables': {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, 'columns': {'ITEMID', 'ORDERID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID)', 'raw_condition': "ORDERID = '@ORDERID)'"}]}
2025-06-05 10:14:22,704 - sql_resource_extractor - DEBUG - Original SQL: UPDATE PurchaseOrdersSET Status = 'Approved', ApprovedBy = @userID, ApprovalDate = GETDATE()WHERE POID = @poID
2025-06-05 10:14:22,705 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE PurchaseOrdersSET Status = 'Approved', ApprovedBy = @userID, ApprovalDate = GETDATE()WHERE POID = @poID
2025-06-05 10:14:22,705 - sql_resource_extractor - DEBUG - WHERE clause: POID = @POID
2025-06-05 10:14:22,705 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,706 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]
2025-06-05 10:14:22,706 - sql_resource_extractor - DEBUG - Extracted resources from Approve Purchase Order: {'tables': {'PURCHASEORDERSSET'}, 'columns': {'STATUS', 'POID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}
2025-06-05 10:14:22,706 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO FinancialValidations(ValidationID, POID, ValidatedBy, ValidationDate, Comments)VALUES (@validationID, @poID, @userID, GETDATE(), @comments)
2025-06-05 10:14:22,706 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO FinancialValidations(ValidationID, POID, ValidatedBy, ValidationDate, Comments)VALUES (@validationID, @poID, @userID, GETDATE(), @comments)
2025-06-05 10:14:22,707 - sql_resource_extractor - DEBUG - Extracted resources from Validate Financial Impact: {'tables': {'FINANCIALVALIDATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:14:22,707 - sql_resource_extractor - DEBUG - Original SQL: UPDATE PurchaseOrdersSET Status = 'Completed', CompletedDate = GETDATE()WHERE POID = @poID
2025-06-05 10:14:22,707 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE PurchaseOrdersSET Status = 'Completed', CompletedDate = GETDATE()WHERE POID = @poID
2025-06-05 10:14:22,708 - sql_resource_extractor - DEBUG - WHERE clause: POID = @POID
2025-06-05 10:14:22,709 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,709 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]
2025-06-05 10:14:22,709 - sql_resource_extractor - DEBUG - Extracted resources from Complete Purchase Order: {'tables': {'PURCHASEORDERSSET'}, 'columns': {'STATUS', 'POID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}
2025-06-05 10:14:22,709 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO VendorNotifications(NotificationID, VendorID, POID, NotificationDate, NotificationType)VALUES (@notificationID, @vendorID, @poID, GETDATE(), 'PO_Completion')
2025-06-05 10:14:22,709 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO VendorNotifications(NotificationID, VendorID, POID, NotificationDate, NotificationType)VALUES (@notificationID, @vendorID, @poID, GETDATE(), 'PO_Completion')
2025-06-05 10:14:22,711 - sql_resource_extractor - DEBUG - Extracted resources from Notify Vendors: {'tables': {'VENDORNOTIFICATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:14:22,711 - sql_resource_extractor - DEBUG - Original SQL: UPDATE OrdersSET Status = 'Fulfilled', FulfillmentDate = GETDATE()WHERE OrderID = @orderID
2025-06-05 10:14:22,711 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE OrdersSET Status = 'Fulfilled', FulfillmentDate = GETDATE()WHERE OrderID = @orderID
2025-06-05 10:14:22,713 - sql_resource_extractor - DEBUG - WHERE clause: ORDERID = @ORDERID
2025-06-05 10:14:22,713 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,713 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}]
2025-06-05 10:14:22,713 - sql_resource_extractor - DEBUG - Extracted resources from Update Customer Order Status: {'tables': {'ORDERSSET'}, 'columns': {'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}]}
2025-06-05 10:14:22,714 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO FinancialTransactions(TransactionID, POID, OrderID, Amount, TransactionDate, TransactionType)VALUES (@transactionID, @poID, @orderID, @amount, GETDATE(), 'Order_Fulfillment')
2025-06-05 10:14:22,714 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO FinancialTransactions(TransactionID, POID, OrderID, Amount, TransactionDate, TransactionType)VALUES (@transactionID, @poID, @orderID, @amount, GETDATE(), 'Order_Fulfillment')
2025-06-05 10:14:22,716 - sql_resource_extractor - DEBUG - Extracted resources from Record Financial Transaction: {'tables': {'FINANCIALTRANSACTIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:14:22,716 - sql_resource_extractor - DEBUG - Original SQL: UPDATE IntegrationLogsSET PreparationComplete = 1,PreparedBy = @userIDWHERE LogID = @logID
2025-06-05 10:14:22,716 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE IntegrationLogsSET PreparationComplete = 1,PreparedBy = @userIDWHERE LogID = @logID
2025-06-05 10:14:22,717 - sql_resource_extractor - DEBUG - WHERE clause: LOGID = @LOGID
2025-06-05 10:14:22,717 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,717 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'LOGID', 'operator': '=', 'value': '@LOGID', 'raw_condition': "LOGID = '@LOGID'"}]
2025-06-05 10:14:22,717 - sql_resource_extractor - DEBUG - Extracted resources from Prepare for Integration: {'tables': {'INTEGRATIONLOGSSET'}, 'columns': {'LOGID', 'PREPARATIONCOMPLETE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'LOGID', 'operator': '=', 'value': '@LOGID', 'raw_condition': "LOGID = '@LOGID'"}]}
2025-06-05 10:14:22,718 - sql_resource_extractor - DEBUG - Original SQL: EXEC sp_IntegrateSystemA @logID, @processID
2025-06-05 10:14:22,718 - sql_resource_extractor - DEBUG - Cleaned SQL: EXEC sp_IntegrateSystemA @logID, @processID
2025-06-05 10:14:22,718 - sql_resource_extractor - DEBUG - Extracted resources from Path A Integration: {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}
2025-06-05 10:14:22,718 - sql_resource_extractor - DEBUG - Original SQL: EXEC sp_IntegrateSystemB @logID, @processID
2025-06-05 10:14:22,718 - sql_resource_extractor - DEBUG - Cleaned SQL: EXEC sp_IntegrateSystemB @logID, @processID
2025-06-05 10:14:22,719 - sql_resource_extractor - DEBUG - Extracted resources from Path B Integration: {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}
2025-06-05 10:14:22,719 - sql_resource_extractor - DEBUG - Original SQL: BEGIN TRANSACTION;UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @orderQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;COMMIT;
2025-06-05 10:14:22,719 - sql_resource_extractor - DEBUG - Cleaned SQL: BEGIN TRANSACTION;UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @orderQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;COMMIT;
2025-06-05 10:14:22,720 - sql_resource_extractor - DEBUG - WHERE clause: ITEMID = @ITEMID
2025-06-05 10:14:22,720 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,720 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:14:22,720 - sql_resource_extractor - DEBUG - Extracted resources from Initiate Inventory Processing: {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:14:22,721 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @additionalQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:14:22,721 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @additionalQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:14:22,722 - sql_resource_extractor - DEBUG - WHERE clause: ITEMID = @ITEMID
2025-06-05 10:14:22,722 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,722 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:14:22,722 - sql_resource_extractor - DEBUG - Extracted resources from Update Inventory Order Status: {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:14:22,722 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Inventory SET Status = 'Processed', LastProcessedTime = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:14:22,722 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Inventory SET Status = 'Processed', LastProcessedTime = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:14:22,723 - sql_resource_extractor - DEBUG - WHERE clause: ITEMID = @ITEMID
2025-06-05 10:14:22,723 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:14:22,723 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:14:22,723 - sql_resource_extractor - DEBUG - Extracted resources from Finalize Inventory Update: {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:14:22,724 - sql_resource_extractor - INFO - Found 20 nodes with SQL operations
2025-06-05 10:14:22,724 - __main__ - INFO - Extracted SQL resources from 20 nodes
2025-06-05 10:14:22,724 - __main__ - INFO - Analyzing parallel execution paths...
2025-06-05 10:14:22,724 - parallel_path_analyzer - INFO - Identifying parallel execution paths...
2025-06-05 10:14:22,724 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 (AND_SPLIT)
2025-06-05 10:14:22,724 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 (OR_SPLIT)
2025-06-05 10:14:22,724 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 (OR_SPLIT)
2025-06-05 10:14:22,724 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 (OR_SPLIT)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:60 (UNKNOWN)
2025-06-05 10:14:22,725 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:61 (UNKNOWN)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:14 (OR_SPLIT)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17 (AND_SPLIT)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 (OR_JOIN)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 (OR_JOIN)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 (OR_JOIN)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 (OR_SPLIT)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 (AND_SPLIT)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 (OR_SPLIT)
2025-06-05 10:14:22,726 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56 (OR_SPLIT)
2025-06-05 10:14:22,727 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 190baa7a-a0e7-4688-a4ec-f25dbe401595 (OR_SPLIT) from rel_type: XOR_SPLIT
2025-06-05 10:14:22,727 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 07342615-1358-4549-8c2b-050e4aa10352 (OR_JOIN) from rel_type: XOR_JOIN
2025-06-05 10:14:22,727 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 1196afcf-1b4a-4849-a52c-615dbd677f9c (AND_SPLIT) from rel_type: AND_SPLIT
2025-06-05 10:14:22,727 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: bcf0cce2-df40-4c87-822b-17ce53163039 (OR_JOIN) from rel_type: OR_JOIN
2025-06-05 10:14:22,727 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d (AND_JOIN) from rel_type: AND_JOIN
2025-06-05 10:14:22,727 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 23646f5e-579a-4b86-9c09-672bf0e221b6 (OR_JOIN) from rel_type: XOR_JOIN
2025-06-05 10:14:22,727 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: b45b7ee6-ce07-4c2e-994d-0426eccf8e25 (OR_SPLIT) from rel_type: XOR_SPLIT
2025-06-05 10:14:22,728 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 373a42b1-afbf-4796-98e2-54e4899c8780 (AND_SPLIT) from rel_type: AND_SPLIT
2025-06-05 10:14:22,728 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4 (AND_JOIN) from rel_type: AND_JOIN
2025-06-05 10:14:22,728 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 05d33945-a100-4251-a8da-1814ae7acf49 (OR_SPLIT) from rel_type: OR_SPLIT
2025-06-05 10:14:22,728 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: e37db572-12fe-4beb-bcdd-b3a23e947632 (OR_SPLIT) from rel_type: XOR_SPLIT
2025-06-05 10:14:22,728 - parallel_path_analyzer - INFO - Total gateways identified: 34
2025-06-05 10:14:22,728 - parallel_path_analyzer - DEBUG - Gateway identification details:
2025-06-05 10:14:22,728 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15: AND_SPLIT (from task_service)
2025-06-05 10:14:22,728 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57: OR_SPLIT (from task_service)
2025-06-05 10:14:22,729 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58: OR_SPLIT (from task_service)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59: OR_SPLIT (from task_service)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:60: UNKNOWN (from intermediatenode)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:61: UNKNOWN (from intermediatenode)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:14: OR_SPLIT (from xor_split)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17: AND_SPLIT (from and_split)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18: OR_JOIN (from or_join)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20: OR_JOIN (from or_join)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21: OR_JOIN (from xor_join)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22: OR_SPLIT (from xor_split)
2025-06-05 10:14:22,730 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24: AND_SPLIT (from and_split)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32: OR_SPLIT (from or_connection)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56: OR_SPLIT (from or_connection)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway 190baa7a-a0e7-4688-a4ec-f25dbe401595: OR_SPLIT (from neo4j_gateway_exclusive)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway 07342615-1358-4549-8c2b-050e4aa10352: OR_JOIN (from neo4j_gateway_exclusive)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway 1196afcf-1b4a-4849-a52c-615dbd677f9c: AND_SPLIT (from neo4j_gateway_parallel)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway bcf0cce2-df40-4c87-822b-17ce53163039: OR_JOIN (from neo4j_gateway_inclusive)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway 2a5b26ec-0f86-4367-b4e4-11bab697253d: AND_JOIN (from neo4j_gateway_parallel)
2025-06-05 10:14:22,731 - parallel_path_analyzer - DEBUG -   Gateway 23646f5e-579a-4b86-9c09-672bf0e221b6: OR_JOIN (from neo4j_gateway_exclusive)
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG -   Gateway b45b7ee6-ce07-4c2e-994d-0426eccf8e25: OR_SPLIT (from neo4j_gateway_exclusive)
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG -   Gateway 373a42b1-afbf-4796-98e2-54e4899c8780: AND_SPLIT (from neo4j_gateway_parallel)
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG -   Gateway 389cc933-78d3-4cbf-adae-cdc01615cbe4: AND_JOIN (from neo4j_gateway_parallel)
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG -   Gateway 05d33945-a100-4251-a8da-1814ae7acf49: OR_SPLIT (from neo4j_gateway_inclusive)
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG -   Gateway e37db572-12fe-4beb-bcdd-b3a23e947632: OR_SPLIT (from neo4j_gateway_exclusive)
2025-06-05 10:14:22,732 - parallel_path_analyzer - INFO - Gateway type distribution: {'AND_SPLIT': 5, 'OR_SPLIT': 19, 'UNKNOWN': 2, 'OR_JOIN': 6, 'AND_JOIN': 2}
2025-06-05 10:14:22,732 - parallel_path_analyzer - INFO - Found 32 realistic gateways for parallel analysis
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 has 0 immediate successors
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 has 0 immediate successors
2025-06-05 10:14:22,732 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has 0 immediate successors
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has 0 immediate successors
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has 0 immediate successors
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has 0 immediate successors
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has 0 immediate successors
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has 0 immediate successors
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31 has 2 immediate successors
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 has SQL operation: Path A Integration
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:14:22,733 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56 has SQL operation: Path B Integration
2025-06-05 10:14:22,734 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,734 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:14:22,734 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:14:22,734 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has 2 immediate successors
2025-06-05 10:14:22,734 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:14:22,734 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,734 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:14:22,735 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has SQL operation: Update Inventory Order Status
2025-06-05 10:14:22,735 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,735 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:14:22,735 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:14:22,735 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has 0 immediate successors
2025-06-05 10:14:22,735 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 has 0 immediate successors
2025-06-05 10:14:22,735 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:14 has 2 immediate successors
2025-06-05 10:14:22,735 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 has SQL operation: Process Standard Order
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG -     Forward path stopped at XOR_JOIN gateway
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 has SQL operation: Process Custom Order
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG -     Forward path stopped at XOR_JOIN gateway
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:14:22,736 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17 has 3 immediate successors
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has SQL operation: Review Purchase Details
2025-06-05 10:14:22,736 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 has SQL operation: Verify System Compatibility
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has SQL operation: Approve Purchase Order
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has SQL operation: Validate Financial Impact
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG -   Forward path found with 9 SQL nodes
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has SQL operation: Check Budget Availability
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has SQL operation: Review Purchase Details
2025-06-05 10:14:22,737 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 has SQL operation: Verify System Compatibility
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has SQL operation: Approve Purchase Order
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has SQL operation: Validate Financial Impact
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG -   Forward path found with 9 SQL nodes
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has SQL operation: Initiate Inventory Processing
2025-06-05 10:14:22,738 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG -   Forward path found with 2 SQL nodes
2025-06-05 10:14:22,739 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 3 paths (forward analysis)
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 has 2 immediate successors
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has SQL operation: Approve Purchase Order
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has SQL operation: Validate Financial Impact
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:14:22,739 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG -   Forward path found with 6 SQL nodes
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG -     Forward path stopped at XOR_JOIN gateway
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has 2 immediate successors
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:14:22,740 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:14:22,741 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:14:22,741 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,741 - parallel_path_analyzer - DEBUG -   Forward path found with 4 SQL nodes
2025-06-05 10:14:22,741 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31 has SQL operation: Prepare for Integration
2025-06-05 10:14:22,741 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 has SQL operation: Path A Integration
2025-06-05 10:14:22,741 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:14:22,741 - parallel_path_analyzer - DEBUG -   Forward path found with 2 SQL nodes
2025-06-05 10:14:22,741 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 2 paths (forward analysis)
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56 has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway 190baa7a-a0e7-4688-a4ec-f25dbe401595 has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway 1196afcf-1b4a-4849-a52c-615dbd677f9c has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway b45b7ee6-ce07-4c2e-994d-0426eccf8e25 has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway 373a42b1-afbf-4796-98e2-54e4899c8780 has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway 05d33945-a100-4251-a8da-1814ae7acf49 has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - DEBUG - Gateway e37db572-12fe-4beb-bcdd-b3a23e947632 has 0 immediate successors
2025-06-05 10:14:22,742 - parallel_path_analyzer - INFO - Processing 8 JOIN gateways for backward analysis
2025-06-05 10:14:22,743 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 (OR_JOIN)
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - Traditional Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has 0 immediate predecessors
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18: Found 0 gateway relationships
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18: Found 0 immediate predecessors: []
2025-06-05 10:14:22,743 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 produced 0 scenarios
2025-06-05 10:14:22,743 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 (OR_JOIN)
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - Traditional Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has 0 immediate predecessors
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20: Found 0 gateway relationships
2025-06-05 10:14:22,743 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20: Found 0 immediate predecessors: []
2025-06-05 10:14:22,744 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 produced 0 scenarios
2025-06-05 10:14:22,744 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 (OR_JOIN)
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG - Traditional Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has 3 immediate predecessors
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 for OR_JOIN
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG -   Backward path found with 1 SQL nodes
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 for OR_JOIN
2025-06-05 10:14:22,744 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has SQL operation: Check Budget Availability
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -   Backward path found with 1 SQL nodes
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 for OR_JOIN
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 has SQL operation: Finalize Inventory Update
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:14:22,745 - parallel_path_analyzer - DEBUG -   Backward path found with 2 SQL nodes
2025-06-05 10:14:22,746 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:14:22,746 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 produced 1 scenarios
2025-06-05 10:14:22,748 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 07342615-1358-4549-8c2b-050e4aa10352 (OR_JOIN)
2025-06-05 10:14:22,748 - parallel_path_analyzer - DEBUG - Traditional Join 07342615-1358-4549-8c2b-050e4aa10352 has 0 immediate predecessors
2025-06-05 10:14:22,748 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 07342615-1358-4549-8c2b-050e4aa10352
2025-06-05 10:14:22,748 - parallel_path_analyzer - DEBUG - Neo4j Join 07342615-1358-4549-8c2b-050e4aa10352: Found 2 gateway relationships
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG - Neo4j Join 07342615-1358-4549-8c2b-050e4aa10352: Found 2 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16']
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 for OR_JOIN
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 has SQL operation: Process Standard Order
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 for OR_JOIN
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 has SQL operation: Process Custom Order
2025-06-05 10:14:22,749 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16
2025-06-05 10:14:22,750 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:14:22,750 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:14:22,750 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:14:22,750 - parallel_path_analyzer - INFO - JOIN gateway 07342615-1358-4549-8c2b-050e4aa10352 produced 1 scenarios
2025-06-05 10:14:22,750 - parallel_path_analyzer - DEBUG - Same paths but different gateways: OR_JOIN vs OR_SPLIT
2025-06-05 10:14:22,751 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: bcf0cce2-df40-4c87-822b-17ce53163039 (OR_JOIN)
2025-06-05 10:14:22,751 - parallel_path_analyzer - DEBUG - Traditional Join bcf0cce2-df40-4c87-822b-17ce53163039 has 0 immediate predecessors
2025-06-05 10:14:22,751 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for bcf0cce2-df40-4c87-822b-17ce53163039
2025-06-05 10:14:22,751 - parallel_path_analyzer - DEBUG - Neo4j Join bcf0cce2-df40-4c87-822b-17ce53163039: Found 3 gateway relationships
2025-06-05 10:14:22,751 - parallel_path_analyzer - DEBUG - Neo4j Join bcf0cce2-df40-4c87-822b-17ce53163039: Found 3 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:14:22,751 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 for OR_JOIN
2025-06-05 10:14:22,752 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:14:22,752 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:14:22,752 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,752 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:14:22,752 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 for OR_JOIN
2025-06-05 10:14:22,752 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has SQL operation: Check Budget Availability
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 for OR_JOIN
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 has SQL operation: Finalize Inventory Update
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:14:22,753 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,754 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:14:22,754 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 2 SQL nodes
2025-06-05 10:14:22,754 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:14:22,754 - parallel_path_analyzer - INFO - JOIN gateway bcf0cce2-df40-4c87-822b-17ce53163039 produced 1 scenarios
2025-06-05 10:14:22,754 - parallel_path_analyzer - DEBUG - Same paths but different gateways: OR_JOIN vs OR_JOIN
2025-06-05 10:14:22,755 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d (AND_JOIN)
2025-06-05 10:14:22,755 - parallel_path_analyzer - DEBUG - Analyzing AND_JOIN gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:14:22,755 - parallel_path_analyzer - DEBUG - Traditional Join 2a5b26ec-0f86-4367-b4e4-11bab697253d has 0 immediate predecessors
2025-06-05 10:14:22,755 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:14:22,755 - parallel_path_analyzer - DEBUG - Neo4j Join 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 gateway relationships
2025-06-05 10:14:22,755 - parallel_path_analyzer - DEBUG - Neo4j Join 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:14:22,755 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 for AND_JOIN
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has SQL operation: Initiate Inventory Processing
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:14:22,756 - parallel_path_analyzer - DEBUG -     Added start_node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 to filtered path
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG - Filtered AND_JOIN path from 2 to 1 nodes: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19'] -> ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 for AND_JOIN
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has SQL operation: Update Inventory Order Status
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has SQL operation: Initiate Inventory Processing
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,757 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has SQL operation: Update Inventory Order Status
2025-06-05 10:14:22,758 - parallel_path_analyzer - DEBUG -     Added start_node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 to filtered path
2025-06-05 10:14:22,758 - parallel_path_analyzer - DEBUG - Filtered AND_JOIN path from 2 to 1 nodes: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58'] -> ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:14:22,758 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:14:22,758 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 converging paths with SQL nodes
2025-06-05 10:14:22,758 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:14:22,758 - parallel_path_analyzer - INFO -   Neo4j Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:14:22,758 - parallel_path_analyzer - DEBUG - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 converging paths
2025-06-05 10:14:22,758 - parallel_path_analyzer - DEBUG -   Path 1: 1 nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:14:22,759 - parallel_path_analyzer - DEBUG -   Path 2: 1 nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:14:22,759 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Validation result = True
2025-06-05 10:14:22,759 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Building scenario with 2 paths
2025-06-05 10:14:22,760 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:14:22,760 - parallel_path_analyzer - INFO - JOIN gateway 2a5b26ec-0f86-4367-b4e4-11bab697253d produced 1 scenarios
2025-06-05 10:14:22,760 - parallel_path_analyzer - DEBUG - Same paths but different gateways: AND_JOIN vs OR_SPLIT
2025-06-05 10:14:22,761 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 23646f5e-579a-4b86-9c09-672bf0e221b6 (OR_JOIN)
2025-06-05 10:14:22,761 - parallel_path_analyzer - DEBUG - Traditional Join 23646f5e-579a-4b86-9c09-672bf0e221b6 has 0 immediate predecessors
2025-06-05 10:14:22,761 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 23646f5e-579a-4b86-9c09-672bf0e221b6
2025-06-05 10:14:22,761 - parallel_path_analyzer - DEBUG - Neo4j Join 23646f5e-579a-4b86-9c09-672bf0e221b6: Found 1 gateway relationships
2025-06-05 10:14:22,761 - parallel_path_analyzer - DEBUG - Neo4j Join 23646f5e-579a-4b86-9c09-672bf0e221b6: Found 1 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21']
2025-06-05 10:14:22,761 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 for OR_JOIN
2025-06-05 10:14:22,761 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has SQL operation: Review Purchase Details
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 2 SQL nodes
2025-06-05 10:14:22,762 - parallel_path_analyzer - INFO - JOIN gateway 23646f5e-579a-4b86-9c09-672bf0e221b6 produced 0 scenarios
2025-06-05 10:14:22,762 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4 (AND_JOIN)
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG - Analyzing AND_JOIN gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4
2025-06-05 10:14:22,762 - parallel_path_analyzer - DEBUG - Traditional Join 389cc933-78d3-4cbf-adae-cdc01615cbe4 has 0 immediate predecessors
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 389cc933-78d3-4cbf-adae-cdc01615cbe4
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG - Neo4j Join 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 gateway relationships
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG - Neo4j Join 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 for AND_JOIN
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:14:22,763 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:14:22,764 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:14:22,765 - parallel_path_analyzer - DEBUG -     Added start_node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 to filtered path
2025-06-05 10:14:22,765 - parallel_path_analyzer - DEBUG - Filtered AND_JOIN path from 4 to 1 nodes: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] -> ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:14:22,765 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:14:22,765 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 converging paths with SQL nodes
2025-06-05 10:14:22,765 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:14:22,765 - parallel_path_analyzer - DEBUG - AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 converging paths
2025-06-05 10:14:22,765 - parallel_path_analyzer - DEBUG -   Path 1: 1 nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:14:22,765 - parallel_path_analyzer - DEBUG - AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Only 1 path(s) found - insufficient for parallel analysis
2025-06-05 10:14:22,766 - parallel_path_analyzer - INFO - JOIN gateway 389cc933-78d3-4cbf-adae-cdc01615cbe4 produced 0 scenarios
2025-06-05 10:14:22,766 - parallel_path_analyzer - INFO - Found 9 parallel execution scenarios
2025-06-05 10:14:22,766 - __main__ - INFO - Identified 9 parallel execution scenarios
2025-06-05 10:14:22,766 - deadlock_detector - DEBUG - Initializing DeadlockDetector
2025-06-05 10:14:22,766 - __main__ - INFO - Running analysis in 'full' mode
2025-06-05 10:14:22,766 - __main__ - INFO - Executing standard deadlock analysis...
2025-06-05 10:14:22,766 - deadlock_detector - INFO - Analyzing deadlocks across 9 parallel scenarios...
2025-06-05 10:14:22,766 - deadlock_detector - DEBUG - Building resource dependency graph...
2025-06-05 10:14:22,766 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15, data type: <class 'dict'>, data: {'name': 'Process Standard Order', 'sql': "UPDATE Orders SET Status = 'Processing' WHERE OrderID = @orderID AND OrderType = 'Standard'", 'resources': {'tables': {'ORDERS'}, 'columns': {'ORDERTYPE', 'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'STANDARD', 'raw_condition': "ORDERTYPE = 'STANDARD'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,767 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16, data type: <class 'dict'>, data: {'name': 'Process Custom Order', 'sql': "UPDATE Orders SET Status = 'Processing',CustomRequirements = @requirementsWHERE OrderID = @orderID AND OrderType = 'Custom'", 'resources': {'tables': {'ORDERS'}, 'columns': {'ORDERTYPE', 'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'CUSTOM', 'raw_condition': "ORDERTYPE = 'CUSTOM'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,767 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17, data type: <class 'dict'>, data: {'name': 'Create Purchase Requisition', 'sql': "INSERT INTO PurchaseRequisitions(ReqID, OrderID, RequestDate, Status, Department)VALUES (@reqID, @orderID, GETDATE(), 'New', 'Procurement')", 'resources': {'tables': {'PURCHASEREQUISITIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,767 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18, data type: <class 'dict'>, data: {'name': 'Generate PO Request', 'sql': "INSERT INTO PurchaseOrders(POID, ReqID, VendorID, PODate, Status)VALUES (@poID, @reqID, @vendorID, GETDATE(), 'Draft')", 'resources': {'tables': {'PURCHASEORDERS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,767 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19, data type: <class 'dict'>, data: {'name': 'Update Inventory Quantity', 'sql': "UPDATE OrderDetails SET InventoryStatus = 'Reserved' WHERE OrderDetailID = @orderDetailID AND ItemID = @itemID;", 'resources': {'tables': {'ORDERDETAILS'}, 'columns': {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERDETAILID', 'operator': '=', 'value': '@ORDERDETAILID', 'raw_condition': "ORDERDETAILID = '@ORDERDETAILID'"}, {'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,767 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20, data type: <class 'dict'>, data: {'name': 'Check Budget Availability', 'sql': 'DECLARE @available DECIMAL(18,2);SELECT @available = RemainingBudgetFROM DepartmentBudgetsWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE()); IF @available >= @estimatedCostUPDATE DepartmentBudgetsSET AllocatedAmount = AllocatedAmount + @estimatedCost,RemainingBudget = RemainingBudget - @estimatedCostWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE());', 'resources': {'tables': {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, 'columns': {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}, {'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,767 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21, data type: <class 'dict'>, data: {'name': 'Review Purchase Details', 'sql': 'SELECT po.*, v.VendorName, v.ContactPersonFROM PurchaseOrders poJOIN Vendors v ON po.VendorID = v.VendorIDWHERE po.POID = @poID', 'resources': {'tables': {'PURCHASEORDERS', 'VENDORS'}, 'columns': {'POID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22, data type: <class 'dict'>, data: {'name': 'Verify System Compatibility', 'sql': 'SELECT i.ItemID, i.ItemName, i.CompatibilityFlags,s.SystemID, s.SystemName, s.VersionFROM Inventory iJOIN Systems s ON i.SystemID = s.SystemIDWHERE i.ItemID IN (SELECT ItemID FROM OrderDetails WHERE OrderID = @orderID)', 'resources': {'tables': {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, 'columns': {'ITEMID', 'ORDERID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID)', 'raw_condition': "ORDERID = '@ORDERID)'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23, data type: <class 'dict'>, data: {'name': 'Approve Purchase Order', 'sql': "UPDATE PurchaseOrdersSET Status = 'Approved', ApprovedBy = @userID, ApprovalDate = GETDATE()WHERE POID = @poID", 'resources': {'tables': {'PURCHASEORDERSSET'}, 'columns': {'STATUS', 'POID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24, data type: <class 'dict'>, data: {'name': 'Validate Financial Impact', 'sql': 'INSERT INTO FinancialValidations(ValidationID, POID, ValidatedBy, ValidationDate, Comments)VALUES (@validationID, @poID, @userID, GETDATE(), @comments)', 'resources': {'tables': {'FINANCIALVALIDATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25, data type: <class 'dict'>, data: {'name': 'Complete Purchase Order', 'sql': "UPDATE PurchaseOrdersSET Status = 'Completed', CompletedDate = GETDATE()WHERE POID = @poID", 'resources': {'tables': {'PURCHASEORDERSSET'}, 'columns': {'STATUS', 'POID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27, data type: <class 'dict'>, data: {'name': 'Notify Vendors', 'sql': "INSERT INTO VendorNotifications(NotificationID, VendorID, POID, NotificationDate, NotificationType)VALUES (@notificationID, @vendorID, @poID, GETDATE(), 'PO_Completion')", 'resources': {'tables': {'VENDORNOTIFICATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28, data type: <class 'dict'>, data: {'name': 'Update Customer Order Status', 'sql': "UPDATE OrdersSET Status = 'Fulfilled', FulfillmentDate = GETDATE()WHERE OrderID = @orderID", 'resources': {'tables': {'ORDERSSET'}, 'columns': {'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29, data type: <class 'dict'>, data: {'name': 'Record Financial Transaction', 'sql': "INSERT INTO FinancialTransactions(TransactionID, POID, OrderID, Amount, TransactionDate, TransactionType)VALUES (@transactionID, @poID, @orderID, @amount, GETDATE(), 'Order_Fulfillment')", 'resources': {'tables': {'FINANCIALTRANSACTIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,768 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31, data type: <class 'dict'>, data: {'name': 'Prepare for Integration', 'sql': 'UPDATE IntegrationLogsSET PreparationComplete = 1,PreparedBy = @userIDWHERE LogID = @logID', 'resources': {'tables': {'INTEGRATIONLOGSSET'}, 'columns': {'LOGID', 'PREPARATIONCOMPLETE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'LOGID', 'operator': '=', 'value': '@LOGID', 'raw_condition': "LOGID = '@LOGID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,769 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32, data type: <class 'dict'>, data: {'name': 'Path A Integration', 'sql': 'EXEC sp_IntegrateSystemA @logID, @processID', 'resources': {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,769 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56, data type: <class 'dict'>, data: {'name': 'Path B Integration', 'sql': 'EXEC sp_IntegrateSystemB @logID, @processID', 'resources': {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,769 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57, data type: <class 'dict'>, data: {'name': 'Initiate Inventory Processing', 'sql': 'BEGIN TRANSACTION;UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @orderQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;COMMIT;', 'resources': {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,769 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58, data type: <class 'dict'>, data: {'name': 'Update Inventory Order Status', 'sql': 'UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @additionalQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;', 'resources': {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,769 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59, data type: <class 'dict'>, data: {'name': 'Finalize Inventory Update', 'sql': "UPDATE Inventory SET Status = 'Processed', LastProcessedTime = GETDATE() WHERE ItemID = @itemID;", 'resources': {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:14:22,769 - deadlock_detector - DEBUG - Added 20 SQL nodes to resource graph
2025-06-05 10:14:22,769 - deadlock_detector - INFO - Building wait-for graph from 9 scenarios...
2025-06-05 10:14:22,769 - deadlock_detector - INFO - Scenario types to process: ['OR_SPLIT', 'OR_SPLIT', 'OR_SPLIT', 'AND_SPLIT', 'AND_SPLIT', 'OR_JOIN', 'OR_JOIN', 'OR_JOIN', 'AND_JOIN']
2025-06-05 10:14:22,770 - deadlock_detector - INFO - Processing scenario 1/9: OR_SPLIT
2025-06-05 10:14:22,770 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:14:22,770 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_SPLIT
2025-06-05 10:14:22,770 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56']
2025-06-05 10:14:22,770 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56
2025-06-05 10:14:22,770 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,770 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32) <-> Path B Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56)
2025-06-05 10:14:22,770 - deadlock_detector - DEBUG -     Node1 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:14:22,771 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:14:22,771 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,771 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,771 - deadlock_detector - DEBUG -   [X] FILTERED: Path A Integration <-> Path B Integration - no shared tables or columns
2025-06-05 10:14:22,771 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,771 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,771 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:14:22,771 - deadlock_detector - INFO - Processing scenario 2/9: OR_SPLIT
2025-06-05 10:14:22,772 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_SPLIT
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19) <-> Update Inventory Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58)
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,772 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG -     Gateway validation (OR_SPLIT): False
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG -   [X] FILTERED: Update Inventory Quantity <-> Update Inventory Order Status - enhanced gateway validation failed
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:14:22,773 - deadlock_detector - INFO - Processing scenario 3/9: OR_SPLIT
2025-06-05 10:14:22,773 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:14:22,773 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_SPLIT
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16']
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Process Standard Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15) <-> Process Custom Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16)
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'ORDERTYPE', 'STATUS', 'ORDERID'}
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'ORDERTYPE', 'STATUS', 'ORDERID'}
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Table overlap: {'ORDERS'}
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Column overlap: {'ORDERTYPE', 'STATUS', 'ORDERID'}
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Gateway validation (OR_SPLIT): True
2025-06-05 10:14:22,774 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,775 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,775 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Process Standard Order vs Process Custom Order (Severity: HIGH)
2025-06-05 10:14:22,775 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,775 - deadlock_detector - DEBUG -     Total conflicts found: 1
2025-06-05 10:14:22,775 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_SPLIT
2025-06-05 10:14:22,775 - deadlock_detector - INFO - Processing scenario 4/9: AND_SPLIT
2025-06-05 10:14:22,775 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 3 paths
2025-06-05 10:14:22,775 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in AND_SPLIT
2025-06-05 10:14:22,775 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:14:22,776 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,776 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,776 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,776 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,776 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,776 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,776 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -     Table overlap: {'PURCHASEORDERS'}
2025-06-05 10:14:22,777 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Review Purchase Details - enhanced gateway validation failed
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,778 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,779 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,780 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,781 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,782 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,783 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,784 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,785 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,786 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:14:22,787 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Approve Purchase Order - enhanced gateway validation failed
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,788 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,789 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Complete Purchase Order - enhanced gateway validation failed
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,790 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,791 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,792 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,793 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,794 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,794 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,794 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,794 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,794 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,794 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,795 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,796 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,797 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,798 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,799 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -     Column overlap: {'ORDERID'}
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Update Customer Order Status - enhanced gateway validation failed
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,800 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,801 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,802 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Review Purchase Details - enhanced gateway validation failed
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,803 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,804 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,805 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -     Table overlap: {'PURCHASEORDERSSET'}
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -     Column overlap: {'STATUS', 'POID'}
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): True
2025-06-05 10:14:22,806 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,807 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Approve Purchase Order <-> Complete Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,807 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Approve Purchase Order vs Complete Purchase Order (Severity: HIGH)
2025-06-05 10:14:22,807 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,807 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,807 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,807 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,808 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Update Customer Order Status - enhanced gateway validation failed
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,809 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,810 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,811 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,812 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,813 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,814 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,815 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,816 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,817 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,818 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,819 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Review Purchase Details - enhanced gateway validation failed
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,820 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,821 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -     Table overlap: {'PURCHASEORDERSSET'}
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -     Column overlap: {'STATUS', 'POID'}
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): True
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,822 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Complete Purchase Order <-> Approve Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Complete Purchase Order vs Approve Purchase Order (Severity: HIGH)
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,822 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,823 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,824 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,825 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Update Customer Order Status - enhanced gateway validation failed
2025-06-05 10:14:22,826 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,826 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,826 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,826 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,826 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,826 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,826 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,827 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:14:22,828 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,829 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,830 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,831 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,832 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:14:22,833 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,834 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,835 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,836 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,837 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,837 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,837 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,837 - deadlock_detector - DEBUG -     Column overlap: {'ORDERID'}
2025-06-05 10:14:22,837 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:14:22,837 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,837 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Verify System Compatibility - enhanced gateway validation failed
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,838 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Approve Purchase Order - enhanced gateway validation failed
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,839 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Complete Purchase Order - enhanced gateway validation failed
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,840 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,841 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,842 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,843 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,844 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,845 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,846 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:14:22,847 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:14:22,848 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Notify Vendors - no shared tables or columns
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,849 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,850 - deadlock_detector - DEBUG -     Total conflicts found: 2
2025-06-05 10:14:22,851 - deadlock_detector - INFO - Found 2 conflicts between paths in AND_SPLIT
2025-06-05 10:14:22,851 - deadlock_detector - DEBUG - Comparing path 1 vs path 3 in AND_SPLIT
2025-06-05 10:14:22,851 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:14:22,851 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,851 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,851 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,851 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,851 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,852 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,853 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,854 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -     Table overlap: {'INVENTORY'}
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:14:22,855 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Initiate Inventory Processing - enhanced gateway validation failed
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,856 - deadlock_detector - DEBUG -     Table overlap: {'ORDERDETAILS'}
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Update Inventory Quantity - enhanced gateway validation failed
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,857 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,858 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,859 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,860 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,861 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,861 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,861 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,861 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,861 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,861 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,861 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,862 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,863 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,864 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,865 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,866 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,867 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,868 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 3
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG - Comparing path 2 vs path 3 in AND_SPLIT
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,869 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,870 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,871 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,872 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -     Table overlap: {'INVENTORY'}
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:14:22,873 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Initiate Inventory Processing - enhanced gateway validation failed
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -     Node1 - Tables: {'INVENTORY', 'ORDERDETAILS', 'SYSTEMS'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:14:22,874 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -     Table overlap: {'ORDERDETAILS'}
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Update Inventory Quantity - enhanced gateway validation failed
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,875 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,876 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,877 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,878 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,879 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,880 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,881 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,882 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,883 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,884 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,885 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,886 - deadlock_detector - DEBUG - No conflicts found between paths 2 and 3
2025-06-05 10:14:22,887 - deadlock_detector - INFO - Processing scenario 5/9: AND_SPLIT
2025-06-05 10:14:22,887 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 2 paths
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in AND_SPLIT
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32']
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'LOGID', 'PREPARATIONCOMPLETE'}
2025-06-05 10:14:22,887 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'POID'}
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Path A Integration - no shared tables or columns
2025-06-05 10:14:22,888 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'LOGID', 'PREPARATIONCOMPLETE'}
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,889 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Path A Integration - no shared tables or columns
2025-06-05 10:14:22,890 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'LOGID', 'PREPARATIONCOMPLETE'}
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,891 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,892 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Path A Integration - no shared tables or columns
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'LOGID', 'PREPARATIONCOMPLETE'}
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,893 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Path A Integration - no shared tables or columns
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,894 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:14:22,895 - deadlock_detector - INFO - Processing scenario 6/9: OR_JOIN
2025-06-05 10:14:22,895 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_JOIN
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20']
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,895 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG - Comparing path 1 vs path 3 in OR_JOIN
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,896 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,897 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,898 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 3
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG - Comparing path 2 vs path 3 in OR_JOIN
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,899 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,900 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,901 - deadlock_detector - DEBUG - No conflicts found between paths 2 and 3
2025-06-05 10:14:22,901 - deadlock_detector - INFO - Processing scenario 7/9: OR_JOIN
2025-06-05 10:14:22,901 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 2 paths
2025-06-05 10:14:22,901 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_JOIN
2025-06-05 10:14:22,901 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16']
2025-06-05 10:14:22,901 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16
2025-06-05 10:14:22,901 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,901 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Process Standard Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15) <-> Process Custom Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16)
2025-06-05 10:14:22,901 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'ORDERTYPE', 'STATUS', 'ORDERID'}
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'ORDERTYPE', 'STATUS', 'ORDERID'}
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -     Table overlap: {'ORDERS'}
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -     Column overlap: {'ORDERTYPE', 'STATUS', 'ORDERID'}
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -     Gateway validation (OR_JOIN): True
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,902 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Process Standard Order vs Process Custom Order (Severity: HIGH)
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:14:22,902 - deadlock_detector - DEBUG -     Total conflicts found: 1
2025-06-05 10:14:22,902 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_JOIN
2025-06-05 10:14:22,903 - deadlock_detector - INFO - Processing scenario 8/9: OR_JOIN
2025-06-05 10:14:22,903 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:14:22,903 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_JOIN
2025-06-05 10:14:22,903 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20']
2025-06-05 10:14:22,903 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:14:22,903 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,903 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:14:22,903 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,903 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG - Comparing path 1 vs path 3 in OR_JOIN
2025-06-05 10:14:22,904 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,905 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:14:22,906 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 3
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG - Comparing path 2 vs path 3 in OR_JOIN
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,907 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'ALLOCATEDAMOUNT', 'FISCALYEAR', 'DEPARTMENTID'}
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:14:22,908 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:14:22,909 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:14:22,909 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:14:22,909 - deadlock_detector - DEBUG - No conflicts found between paths 2 and 3
2025-06-05 10:14:22,909 - deadlock_detector - INFO - Processing scenario 9/9: AND_JOIN
2025-06-05 10:14:22,909 - deadlock_detector - INFO - Analyzing scenario: AND_JOIN with 2 paths
2025-06-05 10:14:22,909 - deadlock_detector - INFO - Processing AND_JOIN scenario - Gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:14:22,909 - deadlock_detector - INFO -   AND_JOIN Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:14:22,909 - deadlock_detector - INFO -   AND_JOIN Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in AND_JOIN
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19) <-> Update Inventory Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58)
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'INVENTORYSTATUS', 'ORDERDETAILID'}
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:14:22,910 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:14:22,911 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:14:22,911 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:14:22,911 - deadlock_detector - DEBUG -     Gateway validation (AND_JOIN): True
2025-06-05 10:14:22,911 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_CROSS_TABLE
2025-06-05 10:14:22,911 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Update Inventory Quantity <-> Update Inventory Order Status - WRITE_WRITE_CROSS_TABLE
2025-06-05 10:14:22,911 - deadlock_detector - DEBUG - Found WRITE_WRITE_CROSS_TABLE conflict: Update Inventory Quantity vs Update Inventory Order Status (Severity: CRITICAL)
2025-06-05 10:14:22,911 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_CROSS_TABLE
2025-06-05 10:14:22,911 - deadlock_detector - DEBUG -     Total conflicts found: 1
2025-06-05 10:14:22,911 - deadlock_detector - INFO - Found 1 conflicts between paths in AND_JOIN
2025-06-05 10:14:22,912 - deadlock_detector - INFO - Wait-for graph built with 6 nodes and 6 edges
2025-06-05 10:14:22,912 - deadlock_detector - INFO - Detecting deadlock cycles using Tarjan's algorithm...
2025-06-05 10:14:22,912 - deadlock_detector - INFO - Found 3 potential deadlock cycles
2025-06-05 10:14:22,912 - deadlock_detector - INFO - Deadlock analysis completed. Found 3 potential deadlock cycles
2025-06-05 10:14:22,912 - report_generator - INFO - Generating comprehensive deadlock analysis report...
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22, data type: <class 'dict'>
2025-06-05 10:14:22,913 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58, data type: <class 'dict'>
2025-06-05 10:14:22,914 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59, data type: <class 'dict'>
2025-06-05 10:14:22,916 - report_generator - INFO - Report saved successfully to results\deadlock_analysis_report_20250605_101420.json
2025-06-05 10:14:22,916 - report_generator - INFO - Comprehensive report saved to: results\deadlock_analysis_report_20250605_101420.json
2025-06-05 10:14:22,918 - __main__ - INFO - Deadlock analysis completed successfully.
2025-06-05 10:14:22,918 - __main__ - INFO - Reports saved to: results
2025-06-05 10:14:22,918 - neo4j.pool - DEBUG - [#0000]  _: <POOL> close
2025-06-05 10:14:22,918 - neo4j.io - DEBUG - [#E9AA]  C: GOODBYE
2025-06-05 10:14:22,918 - neo4j.io - DEBUG - [#E9AA]  C: <CLOSE>
2025-06-05 10:14:22,918 - neo4j_connector - DEBUG - Neo4j connection closed
2025-06-05 10:14:22,918 - __main__ - INFO - Neo4j connection closed.
2025-06-05 10:16:38,870 - __main__ - INFO - Starting Flexible Deadlock Detection System...
2025-06-05 10:16:38,870 - __main__ - INFO - Initializing system components...
2025-06-05 10:16:38,870 - neo4j_connector - DEBUG - Initializing Neo4jConnector with URI: bolt://localhost:7687
2025-06-05 10:16:38,871 - neo4j.pool - DEBUG - [#0000]  _: <POOL> created, direct address IPv4Address(('localhost', 7687))
2025-06-05 10:16:38,871 - neo4j_connector - DEBUG - Neo4j driver initialized successfully
2025-06-05 10:16:38,871 - sql_resource_extractor - DEBUG - Initializing SQLResourceExtractor
2025-06-05 10:16:38,871 - parallel_path_analyzer - DEBUG - Initializing ParallelPathAnalyzer
2025-06-05 10:16:38,872 - report_generator - DEBUG - Initializing ReportGenerator with output directory: results
2025-06-05 10:16:38,872 - __main__ - INFO - Testing Neo4j connection...
2025-06-05 10:16:38,872 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: neo4j
2025-06-05 10:16:38,872 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> pinning database: 'neo4j'
2025-06-05 10:16:38,872 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name='neo4j', guessed=False)
2025-06-05 10:16:38,872 - neo4j.pool - DEBUG - [#0000]  _: <POOL> trying to hand out new connection
2025-06-05 10:16:38,873 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> in: localhost:7687
2025-06-05 10:16:38,878 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> dns resolver out: [::1]:7687
2025-06-05 10:16:38,878 - neo4j.io - DEBUG - [#0000]  C: <OPEN> [::1]:7687
2025-06-05 10:16:40,937 - neo4j.io - DEBUG - [#0000]  S: <ERROR> ConnectionRefusedError 10061 'No connection could be made because the target machine actively refused it' None 10061 None
2025-06-05 10:16:40,937 - neo4j.io - DEBUG - [#0000]  C: <CLOSE> [::1]:7687
2025-06-05 10:16:40,937 - neo4j.io - DEBUG - [#0000]  S: <CONNECTION FAILED> [::1]:7687 ServiceUnavailable: Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] No connection could be made because the target machine actively refused it)
2025-06-05 10:16:40,937 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> dns resolver out: 127.0.0.1:7687
2025-06-05 10:16:40,938 - neo4j.io - DEBUG - [#0000]  C: <OPEN> 127.0.0.1:7687
2025-06-05 10:16:40,938 - neo4j.io - DEBUG - [#EA3F]  C: <MAGIC> 0x6060B017
2025-06-05 10:16:40,938 - neo4j.io - DEBUG - [#EA3F]  C: <HANDSHAKE> 0x000001FF 0x00080805 0x00020404 0x00000003
2025-06-05 10:16:40,939 - neo4j.io - DEBUG - [#EA3F]  S: <HANDSHAKE> 0x000001FF [3] 0x00040404 0x00040405 0x00020805 0x00
2025-06-05 10:16:40,939 - neo4j.io - DEBUG - [#EA3F]  C: <HANDSHAKE> 0x00000805 0x00
2025-06-05 10:16:40,939 - neo4j.io - DEBUG - [#EA3F]  C: HELLO {'user_agent': 'neo4j-python/5.28.1 Python/3.12.4-final-0 (win32)', 'bolt_agent': {'product': 'neo4j-python/5.28.1', 'platform': 'Windows 11; AMD64', 'language': 'Python/3.12.4-final-0', 'language_details': 'CPython; 3.12.4-final-0 (tags/v3.12.4:8e8a4ba, Jun  6 2024 19:30:16) [MSC v.1940 64 bit (AMD64)]'}}
2025-06-05 10:16:40,939 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> client state: CONNECTED > AUTHENTICATION
2025-06-05 10:16:40,940 - neo4j.io - DEBUG - [#EA3F]  C: LOGON {'scheme': 'basic', 'principal': 'neo4j', 'credentials': '*******'}
2025-06-05 10:16:40,940 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> client state: AUTHENTICATION > READY
2025-06-05 10:16:40,940 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'server': 'Neo4j/5.26.7', 'protocol_version': '5.8', 'connection_id': 'bolt-137', 'hints': {'connection.recv_timeout_seconds': 120, 'ssr.enabled': True}}
2025-06-05 10:16:40,940 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: CONNECTED > AUTHENTICATION
2025-06-05 10:16:40,941 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'advertised_address': 'localhost:7687'}
2025-06-05 10:16:40,941 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: AUTHENTICATION > READY
2025-06-05 10:16:40,941 - neo4j.io - DEBUG - [#EA3F]  C: RUN 'RETURN 1 as test' {} {'db': 'neo4j'}
2025-06-05 10:16:40,941 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> client state: READY > STREAMING
2025-06-05 10:16:40,941 - neo4j.io - DEBUG - [#EA3F]  C: PULL {'n': 1000}
2025-06-05 10:16:40,942 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'t_first': 1, 'fields': ['test']}
2025-06-05 10:16:40,942 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: READY > STREAMING
2025-06-05 10:16:40,942 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,942 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'bookmark': 'FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=', 'statuses': [{'gql_status': '00000', 'status_description': 'note: successful completion'}], 'type': 'r', 't_last': 0, 'db': 'neo4j'}
2025-06-05 10:16:40,942 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: STREAMING > READY
2025-06-05 10:16:40,943 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> released bolt-137
2025-06-05 10:16:40,943 - neo4j_connector - INFO - Neo4j connection test successful
2025-06-05 10:16:40,943 - __main__ - INFO - Fetching graph data from Neo4j...
2025-06-05 10:16:40,943 - neo4j_connector - DEBUG - Fetching nodes from Neo4j...
2025-06-05 10:16:40,943 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: neo4j
2025-06-05 10:16:40,943 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> pinning database: 'neo4j'
2025-06-05 10:16:40,943 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name='neo4j', guessed=False)
2025-06-05 10:16:40,944 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> picked existing connection bolt-137
2025-06-05 10:16:40,944 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-06-05 10:16:40,944 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> handing out existing connection
2025-06-05 10:16:40,944 - neo4j.io - DEBUG - [#EA3F]  C: RUN '\n                MATCH (n)\n                RETURN elementId(n) as id, labels(n) as labels, properties(n) as props\n                ' {} {'db': 'neo4j'}
2025-06-05 10:16:40,944 - neo4j.io - DEBUG - [#EA3F]  C: PULL {'n': 1000}
2025-06-05 10:16:40,945 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'t_first': 0, 'fields': ['id', 'labels', 'props']}
2025-06-05 10:16:40,945 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: READY > STREAMING
2025-06-05 10:16:40,945 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,945 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,946 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,946 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,946 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,946 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,946 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,947 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,947 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,947 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,947 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,947 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,947 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,948 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,948 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,948 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,948 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,948 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,949 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,949 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,949 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,949 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,949 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,950 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,950 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,950 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,950 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,951 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,951 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,951 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,951 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,951 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,952 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,952 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'bookmark': 'FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=', 'statuses': [{'gql_status': '00000', 'status_description': 'note: successful completion'}], 'type': 'r', 't_last': 0, 'db': 'neo4j'}
2025-06-05 10:16:40,952 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: STREAMING > READY
2025-06-05 10:16:40,952 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> released bolt-137
2025-06-05 10:16:40,952 - neo4j_connector - DEBUG - Fetching relationships from Neo4j...
2025-06-05 10:16:40,952 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: neo4j
2025-06-05 10:16:40,952 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name='neo4j', guessed=False)
2025-06-05 10:16:40,952 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> picked existing connection bolt-137
2025-06-05 10:16:40,953 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-06-05 10:16:40,953 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> handing out existing connection
2025-06-05 10:16:40,953 - neo4j.io - DEBUG - [#EA3F]  C: RUN '\n                MATCH (a)-[r]->(b)\n                RETURN elementId(a) as source_id, elementId(b) as target_id, \n                       type(r) as rel_type, properties(r) as props\n                ' {} {'db': 'neo4j', 'bookmarks': ['FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=']}
2025-06-05 10:16:40,953 - neo4j.io - DEBUG - [#EA3F]  C: PULL {'n': 1000}
2025-06-05 10:16:40,954 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'t_first': 1, 'fields': ['source_id', 'target_id', 'rel_type', 'props']}
2025-06-05 10:16:40,954 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: READY > STREAMING
2025-06-05 10:16:40,954 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,954 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,955 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,955 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,955 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,955 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,955 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,956 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,956 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,956 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,956 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,956 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,957 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,957 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,957 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,957 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,957 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,958 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,958 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,958 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,958 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,958 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,958 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,958 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,959 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,960 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,960 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,960 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,960 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,960 - neo4j.io - DEBUG - [#EA3F]  S: RECORD * 1
2025-06-05 10:16:40,960 - neo4j.io - DEBUG - [#EA3F]  S: SUCCESS {'bookmark': 'FB:kcwQ7AlN+vUdTvGfBbJ2UdmRiMkCGpA=', 'statuses': [{'gql_status': '00000', 'status_description': 'note: successful completion'}], 'type': 'r', 't_last': 0, 'db': 'neo4j'}
2025-06-05 10:16:40,960 - neo4j.io - DEBUG - [#EA3F]  _: <CONNECTION> server state: STREAMING > READY
2025-06-05 10:16:40,960 - neo4j.pool - DEBUG - [#EA3F]  _: <POOL> released bolt-137
2025-06-05 10:16:40,961 - neo4j_connector - INFO - Fetched 33 nodes and 37 relationships
2025-06-05 10:16:40,961 - __main__ - INFO - Found 33 nodes and 37 relationships
2025-06-05 10:16:40,961 - __main__ - INFO - Extracting SQL resources from graph data...
2025-06-05 10:16:40,961 - sql_resource_extractor - INFO - Extracting SQL resources from graph data...
2025-06-05 10:16:40,961 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Orders SET Status = 'Processing' WHERE OrderID = @orderID AND OrderType = 'Standard'
2025-06-05 10:16:40,961 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Orders SET Status = 'Processing' WHERE OrderID = @orderID AND OrderType = 'Standard'
2025-06-05 10:16:40,966 - sql_resource_extractor - DEBUG - WHERE clause: ORDERID = @ORDERID AND ORDERTYPE = 'STANDARD'
2025-06-05 10:16:40,966 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,967 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'STANDARD', 'raw_condition': "ORDERTYPE = 'STANDARD'"}]
2025-06-05 10:16:40,967 - sql_resource_extractor - DEBUG - Extracted resources from Process Standard Order: {'tables': {'ORDERS'}, 'columns': {'STATUS', 'ORDERID', 'ORDERTYPE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'STANDARD', 'raw_condition': "ORDERTYPE = 'STANDARD'"}]}
2025-06-05 10:16:40,967 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Orders SET Status = 'Processing',CustomRequirements = @requirementsWHERE OrderID = @orderID AND OrderType = 'Custom'
2025-06-05 10:16:40,967 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Orders SET Status = 'Processing',CustomRequirements = @requirementsWHERE OrderID = @orderID AND OrderType = 'Custom'
2025-06-05 10:16:40,968 - sql_resource_extractor - DEBUG - WHERE clause: ORDERID = @ORDERID AND ORDERTYPE = 'CUSTOM'
2025-06-05 10:16:40,968 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,969 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'CUSTOM', 'raw_condition': "ORDERTYPE = 'CUSTOM'"}]
2025-06-05 10:16:40,969 - sql_resource_extractor - DEBUG - Extracted resources from Process Custom Order: {'tables': {'ORDERS'}, 'columns': {'STATUS', 'ORDERID', 'ORDERTYPE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'CUSTOM', 'raw_condition': "ORDERTYPE = 'CUSTOM'"}]}
2025-06-05 10:16:40,969 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO PurchaseRequisitions(ReqID, OrderID, RequestDate, Status, Department)VALUES (@reqID, @orderID, GETDATE(), 'New', 'Procurement')
2025-06-05 10:16:40,969 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO PurchaseRequisitions(ReqID, OrderID, RequestDate, Status, Department)VALUES (@reqID, @orderID, GETDATE(), 'New', 'Procurement')
2025-06-05 10:16:40,970 - sql_resource_extractor - DEBUG - Extracted resources from Create Purchase Requisition: {'tables': {'PURCHASEREQUISITIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:16:40,971 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO PurchaseOrders(POID, ReqID, VendorID, PODate, Status)VALUES (@poID, @reqID, @vendorID, GETDATE(), 'Draft')
2025-06-05 10:16:40,971 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO PurchaseOrders(POID, ReqID, VendorID, PODate, Status)VALUES (@poID, @reqID, @vendorID, GETDATE(), 'Draft')
2025-06-05 10:16:40,972 - sql_resource_extractor - DEBUG - Extracted resources from Generate PO Request: {'tables': {'PURCHASEORDERS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:16:40,972 - sql_resource_extractor - DEBUG - Original SQL: UPDATE OrderDetails SET InventoryStatus = 'Reserved' WHERE OrderDetailID = @orderDetailID AND ItemID = @itemID;
2025-06-05 10:16:40,972 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE OrderDetails SET InventoryStatus = 'Reserved' WHERE OrderDetailID = @orderDetailID AND ItemID = @itemID;
2025-06-05 10:16:40,973 - sql_resource_extractor - DEBUG - WHERE clause: ORDERDETAILID = @ORDERDETAILID AND ITEMID = @ITEMID
2025-06-05 10:16:40,973 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,973 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERDETAILID', 'operator': '=', 'value': '@ORDERDETAILID', 'raw_condition': "ORDERDETAILID = '@ORDERDETAILID'"}, {'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:16:40,974 - sql_resource_extractor - DEBUG - Extracted resources from Update Inventory Quantity: {'tables': {'ORDERDETAILS'}, 'columns': {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERDETAILID', 'operator': '=', 'value': '@ORDERDETAILID', 'raw_condition': "ORDERDETAILID = '@ORDERDETAILID'"}, {'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:16:40,974 - sql_resource_extractor - DEBUG - Original SQL: DECLARE @available DECIMAL(18,2);SELECT @available = RemainingBudgetFROM DepartmentBudgetsWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE()); IF @available >= @estimatedCostUPDATE DepartmentBudgetsSET AllocatedAmount = AllocatedAmount + @estimatedCost,RemainingBudget = RemainingBudget - @estimatedCostWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE());
2025-06-05 10:16:40,974 - sql_resource_extractor - DEBUG - Cleaned SQL: DECLARE @available DECIMAL(18,2);SELECT @available = RemainingBudgetFROM DepartmentBudgetsWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE()); IF @available >= @estimatedCostUPDATE DepartmentBudgetsSET AllocatedAmount = AllocatedAmount + @estimatedCost,RemainingBudget = RemainingBudget - @estimatedCostWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE());
2025-06-05 10:16:40,977 - sql_resource_extractor - DEBUG - WHERE clause: DEPARTMENTID = @DEPTID AND FISCALYEAR = YEAR(GETDATE())
2025-06-05 10:16:40,977 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,977 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]
2025-06-05 10:16:40,977 - sql_resource_extractor - DEBUG - WHERE clause: DEPARTMENTID = @DEPTID AND FISCALYEAR = YEAR(GETDATE())
2025-06-05 10:16:40,977 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,977 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}, {'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]
2025-06-05 10:16:40,978 - sql_resource_extractor - DEBUG - Extracted resources from Check Budget Availability: {'tables': {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, 'columns': {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}, {'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]}
2025-06-05 10:16:40,978 - sql_resource_extractor - DEBUG - Original SQL: SELECT po.*, v.VendorName, v.ContactPersonFROM PurchaseOrders poJOIN Vendors v ON po.VendorID = v.VendorIDWHERE po.POID = @poID
2025-06-05 10:16:40,978 - sql_resource_extractor - DEBUG - Cleaned SQL: SELECT po.*, v.VendorName, v.ContactPersonFROM PurchaseOrders poJOIN Vendors v ON po.VendorID = v.VendorIDWHERE po.POID = @poID
2025-06-05 10:16:40,979 - sql_resource_extractor - DEBUG - WHERE clause: PO.POID = @POID
2025-06-05 10:16:40,979 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,979 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]
2025-06-05 10:16:40,979 - sql_resource_extractor - DEBUG - Extracted resources from Review Purchase Details: {'tables': {'PURCHASEORDERS', 'VENDORS'}, 'columns': {'POID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}
2025-06-05 10:16:40,979 - sql_resource_extractor - DEBUG - Original SQL: SELECT i.ItemID, i.ItemName, i.CompatibilityFlags,s.SystemID, s.SystemName, s.VersionFROM Inventory iJOIN Systems s ON i.SystemID = s.SystemIDWHERE i.ItemID IN (SELECT ItemID FROM OrderDetails WHERE OrderID = @orderID)
2025-06-05 10:16:40,979 - sql_resource_extractor - DEBUG - Cleaned SQL: SELECT i.ItemID, i.ItemName, i.CompatibilityFlags,s.SystemID, s.SystemName, s.VersionFROM Inventory iJOIN Systems s ON i.SystemID = s.SystemIDWHERE i.ItemID IN (SELECT ItemID FROM OrderDetails WHERE OrderID = @orderID)
2025-06-05 10:16:40,981 - sql_resource_extractor - DEBUG - WHERE clause: I.ITEMID IN (SELECT ITEMID FROM ORDERDETAILS WHERE ORDERID = @ORDERID)
2025-06-05 10:16:40,981 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,981 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID)', 'raw_condition': "ORDERID = '@ORDERID)'"}]
2025-06-05 10:16:40,982 - sql_resource_extractor - DEBUG - Extracted resources from Verify System Compatibility: {'tables': {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, 'columns': {'ITEMID', 'ORDERID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID)', 'raw_condition': "ORDERID = '@ORDERID)'"}]}
2025-06-05 10:16:40,982 - sql_resource_extractor - DEBUG - Original SQL: UPDATE PurchaseOrdersSET Status = 'Approved', ApprovedBy = @userID, ApprovalDate = GETDATE()WHERE POID = @poID
2025-06-05 10:16:40,982 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE PurchaseOrdersSET Status = 'Approved', ApprovedBy = @userID, ApprovalDate = GETDATE()WHERE POID = @poID
2025-06-05 10:16:40,983 - sql_resource_extractor - DEBUG - WHERE clause: POID = @POID
2025-06-05 10:16:40,983 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,983 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]
2025-06-05 10:16:40,983 - sql_resource_extractor - DEBUG - Extracted resources from Approve Purchase Order: {'tables': {'PURCHASEORDERSSET'}, 'columns': {'POID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}
2025-06-05 10:16:40,983 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO FinancialValidations(ValidationID, POID, ValidatedBy, ValidationDate, Comments)VALUES (@validationID, @poID, @userID, GETDATE(), @comments)
2025-06-05 10:16:40,984 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO FinancialValidations(ValidationID, POID, ValidatedBy, ValidationDate, Comments)VALUES (@validationID, @poID, @userID, GETDATE(), @comments)
2025-06-05 10:16:40,985 - sql_resource_extractor - DEBUG - Extracted resources from Validate Financial Impact: {'tables': {'FINANCIALVALIDATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:16:40,985 - sql_resource_extractor - DEBUG - Original SQL: UPDATE PurchaseOrdersSET Status = 'Completed', CompletedDate = GETDATE()WHERE POID = @poID
2025-06-05 10:16:40,985 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE PurchaseOrdersSET Status = 'Completed', CompletedDate = GETDATE()WHERE POID = @poID
2025-06-05 10:16:40,986 - sql_resource_extractor - DEBUG - WHERE clause: POID = @POID
2025-06-05 10:16:40,986 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,986 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]
2025-06-05 10:16:40,986 - sql_resource_extractor - DEBUG - Extracted resources from Complete Purchase Order: {'tables': {'PURCHASEORDERSSET'}, 'columns': {'POID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}
2025-06-05 10:16:40,986 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO VendorNotifications(NotificationID, VendorID, POID, NotificationDate, NotificationType)VALUES (@notificationID, @vendorID, @poID, GETDATE(), 'PO_Completion')
2025-06-05 10:16:40,986 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO VendorNotifications(NotificationID, VendorID, POID, NotificationDate, NotificationType)VALUES (@notificationID, @vendorID, @poID, GETDATE(), 'PO_Completion')
2025-06-05 10:16:40,988 - sql_resource_extractor - DEBUG - Extracted resources from Notify Vendors: {'tables': {'VENDORNOTIFICATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:16:40,988 - sql_resource_extractor - DEBUG - Original SQL: UPDATE OrdersSET Status = 'Fulfilled', FulfillmentDate = GETDATE()WHERE OrderID = @orderID
2025-06-05 10:16:40,988 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE OrdersSET Status = 'Fulfilled', FulfillmentDate = GETDATE()WHERE OrderID = @orderID
2025-06-05 10:16:40,989 - sql_resource_extractor - DEBUG - WHERE clause: ORDERID = @ORDERID
2025-06-05 10:16:40,989 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,989 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}]
2025-06-05 10:16:40,989 - sql_resource_extractor - DEBUG - Extracted resources from Update Customer Order Status: {'tables': {'ORDERSSET'}, 'columns': {'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}]}
2025-06-05 10:16:40,989 - sql_resource_extractor - DEBUG - Original SQL: INSERT INTO FinancialTransactions(TransactionID, POID, OrderID, Amount, TransactionDate, TransactionType)VALUES (@transactionID, @poID, @orderID, @amount, GETDATE(), 'Order_Fulfillment')
2025-06-05 10:16:40,990 - sql_resource_extractor - DEBUG - Cleaned SQL: INSERT INTO FinancialTransactions(TransactionID, POID, OrderID, Amount, TransactionDate, TransactionType)VALUES (@transactionID, @poID, @orderID, @amount, GETDATE(), 'Order_Fulfillment')
2025-06-05 10:16:40,991 - sql_resource_extractor - DEBUG - Extracted resources from Record Financial Transaction: {'tables': {'FINANCIALTRANSACTIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}
2025-06-05 10:16:40,991 - sql_resource_extractor - DEBUG - Original SQL: UPDATE IntegrationLogsSET PreparationComplete = 1,PreparedBy = @userIDWHERE LogID = @logID
2025-06-05 10:16:40,991 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE IntegrationLogsSET PreparationComplete = 1,PreparedBy = @userIDWHERE LogID = @logID
2025-06-05 10:16:40,992 - sql_resource_extractor - DEBUG - WHERE clause: LOGID = @LOGID
2025-06-05 10:16:40,992 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,992 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'LOGID', 'operator': '=', 'value': '@LOGID', 'raw_condition': "LOGID = '@LOGID'"}]
2025-06-05 10:16:40,992 - sql_resource_extractor - DEBUG - Extracted resources from Prepare for Integration: {'tables': {'INTEGRATIONLOGSSET'}, 'columns': {'PREPARATIONCOMPLETE', 'LOGID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'LOGID', 'operator': '=', 'value': '@LOGID', 'raw_condition': "LOGID = '@LOGID'"}]}
2025-06-05 10:16:40,992 - sql_resource_extractor - DEBUG - Original SQL: EXEC sp_IntegrateSystemA @logID, @processID
2025-06-05 10:16:40,992 - sql_resource_extractor - DEBUG - Cleaned SQL: EXEC sp_IntegrateSystemA @logID, @processID
2025-06-05 10:16:40,993 - sql_resource_extractor - DEBUG - Extracted resources from Path A Integration: {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}
2025-06-05 10:16:40,993 - sql_resource_extractor - DEBUG - Original SQL: EXEC sp_IntegrateSystemB @logID, @processID
2025-06-05 10:16:40,993 - sql_resource_extractor - DEBUG - Cleaned SQL: EXEC sp_IntegrateSystemB @logID, @processID
2025-06-05 10:16:40,994 - sql_resource_extractor - DEBUG - Extracted resources from Path B Integration: {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}
2025-06-05 10:16:40,994 - sql_resource_extractor - DEBUG - Original SQL: BEGIN TRANSACTION;UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @orderQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;COMMIT;
2025-06-05 10:16:40,994 - sql_resource_extractor - DEBUG - Cleaned SQL: BEGIN TRANSACTION;UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @orderQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;COMMIT;
2025-06-05 10:16:40,995 - sql_resource_extractor - DEBUG - WHERE clause: ITEMID = @ITEMID
2025-06-05 10:16:40,995 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,995 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:16:40,995 - sql_resource_extractor - DEBUG - Extracted resources from Initiate Inventory Processing: {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:16:40,995 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @additionalQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:16:40,996 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @additionalQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:16:40,996 - sql_resource_extractor - DEBUG - WHERE clause: ITEMID = @ITEMID
2025-06-05 10:16:40,997 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,997 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:16:40,997 - sql_resource_extractor - DEBUG - Extracted resources from Update Inventory Order Status: {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:16:40,997 - sql_resource_extractor - DEBUG - Original SQL: UPDATE Inventory SET Status = 'Processed', LastProcessedTime = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:16:40,997 - sql_resource_extractor - DEBUG - Cleaned SQL: UPDATE Inventory SET Status = 'Processed', LastProcessedTime = GETDATE() WHERE ItemID = @itemID;
2025-06-05 10:16:40,998 - sql_resource_extractor - DEBUG - WHERE clause: ITEMID = @ITEMID
2025-06-05 10:16:40,998 - sql_resource_extractor - DEBUG - Extracted WHERE columns: []
2025-06-05 10:16:40,998 - sql_resource_extractor - DEBUG - Extracted WHERE conditions: [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]
2025-06-05 10:16:40,999 - sql_resource_extractor - DEBUG - Extracted resources from Finalize Inventory Update: {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}
2025-06-05 10:16:40,999 - sql_resource_extractor - INFO - Found 20 nodes with SQL operations
2025-06-05 10:16:40,999 - __main__ - INFO - Extracted SQL resources from 20 nodes
2025-06-05 10:16:40,999 - __main__ - INFO - Analyzing parallel execution paths...
2025-06-05 10:16:40,999 - parallel_path_analyzer - INFO - Identifying parallel execution paths...
2025-06-05 10:16:40,999 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 (AND_SPLIT)
2025-06-05 10:16:40,999 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 (OR_SPLIT)
2025-06-05 10:16:41,000 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 (OR_SPLIT)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:60 (UNKNOWN)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:61 (UNKNOWN)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:14 (OR_SPLIT)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17 (AND_SPLIT)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 (OR_JOIN)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 (OR_JOIN)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 (OR_JOIN)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 (OR_SPLIT)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 (AND_SPLIT)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 (OR_SPLIT)
2025-06-05 10:16:41,001 - parallel_path_analyzer - DEBUG - Found gateway from relationship: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56 (OR_SPLIT)
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 190baa7a-a0e7-4688-a4ec-f25dbe401595 (OR_SPLIT) from rel_type: XOR_SPLIT
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 07342615-1358-4549-8c2b-050e4aa10352 (OR_JOIN) from rel_type: XOR_JOIN
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 1196afcf-1b4a-4849-a52c-615dbd677f9c (AND_SPLIT) from rel_type: AND_SPLIT
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: bcf0cce2-df40-4c87-822b-17ce53163039 (OR_JOIN) from rel_type: OR_JOIN
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d (AND_JOIN) from rel_type: AND_JOIN
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 23646f5e-579a-4b86-9c09-672bf0e221b6 (OR_JOIN) from rel_type: XOR_JOIN
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: b45b7ee6-ce07-4c2e-994d-0426eccf8e25 (OR_SPLIT) from rel_type: XOR_SPLIT
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 373a42b1-afbf-4796-98e2-54e4899c8780 (AND_SPLIT) from rel_type: AND_SPLIT
2025-06-05 10:16:41,002 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4 (AND_JOIN) from rel_type: AND_JOIN
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: 05d33945-a100-4251-a8da-1814ae7acf49 (OR_SPLIT) from rel_type: OR_SPLIT
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG - Found Neo4j gateway: e37db572-12fe-4beb-bcdd-b3a23e947632 (OR_SPLIT) from rel_type: XOR_SPLIT
2025-06-05 10:16:41,003 - parallel_path_analyzer - INFO - Total gateways identified: 34
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG - Gateway identification details:
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15: AND_SPLIT (from task_service)
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16: OR_SPLIT (from task_service)
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19: OR_SPLIT (from task_service)
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23: OR_SPLIT (from task_service)
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25: OR_SPLIT (from task_service)
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27: OR_SPLIT (from task_service)
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28: OR_SPLIT (from task_service)
2025-06-05 10:16:41,003 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29: OR_SPLIT (from task_service)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31: OR_SPLIT (from task_service)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57: OR_SPLIT (from task_service)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58: OR_SPLIT (from task_service)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59: OR_SPLIT (from task_service)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:60: UNKNOWN (from intermediatenode)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:61: UNKNOWN (from intermediatenode)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:14: OR_SPLIT (from xor_split)
2025-06-05 10:16:41,004 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17: AND_SPLIT (from and_split)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18: OR_JOIN (from or_join)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20: OR_JOIN (from or_join)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21: OR_JOIN (from xor_join)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22: OR_SPLIT (from xor_split)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24: AND_SPLIT (from and_split)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32: OR_SPLIT (from or_connection)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56: OR_SPLIT (from or_connection)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 190baa7a-a0e7-4688-a4ec-f25dbe401595: OR_SPLIT (from neo4j_gateway_exclusive)
2025-06-05 10:16:41,005 - parallel_path_analyzer - DEBUG -   Gateway 07342615-1358-4549-8c2b-050e4aa10352: OR_JOIN (from neo4j_gateway_exclusive)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway 1196afcf-1b4a-4849-a52c-615dbd677f9c: AND_SPLIT (from neo4j_gateway_parallel)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway bcf0cce2-df40-4c87-822b-17ce53163039: OR_JOIN (from neo4j_gateway_inclusive)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway 2a5b26ec-0f86-4367-b4e4-11bab697253d: AND_JOIN (from neo4j_gateway_parallel)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway 23646f5e-579a-4b86-9c09-672bf0e221b6: OR_JOIN (from neo4j_gateway_exclusive)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway b45b7ee6-ce07-4c2e-994d-0426eccf8e25: OR_SPLIT (from neo4j_gateway_exclusive)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway 373a42b1-afbf-4796-98e2-54e4899c8780: AND_SPLIT (from neo4j_gateway_parallel)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway 389cc933-78d3-4cbf-adae-cdc01615cbe4: AND_JOIN (from neo4j_gateway_parallel)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway 05d33945-a100-4251-a8da-1814ae7acf49: OR_SPLIT (from neo4j_gateway_inclusive)
2025-06-05 10:16:41,006 - parallel_path_analyzer - DEBUG -   Gateway e37db572-12fe-4beb-bcdd-b3a23e947632: OR_SPLIT (from neo4j_gateway_exclusive)
2025-06-05 10:16:41,006 - parallel_path_analyzer - INFO - Gateway type distribution: {'AND_SPLIT': 5, 'OR_SPLIT': 19, 'UNKNOWN': 2, 'OR_JOIN': 6, 'AND_JOIN': 2}
2025-06-05 10:16:41,006 - parallel_path_analyzer - INFO - Found 32 realistic gateways for parallel analysis
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has 0 immediate successors
2025-06-05 10:16:41,007 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31 has 2 immediate successors
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 has SQL operation: Path A Integration
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56 has SQL operation: Path B Integration
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:16:41,008 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has 2 immediate successors
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,008 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has SQL operation: Update Inventory Order Status
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:16:41,009 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has 0 immediate successors
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 has 0 immediate successors
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:14 has 2 immediate successors
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 has SQL operation: Process Standard Order
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG -     Forward path stopped at XOR_JOIN gateway
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 has SQL operation: Process Custom Order
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG -     Forward path stopped at XOR_JOIN gateway
2025-06-05 10:16:41,009 - parallel_path_analyzer - DEBUG -   Forward path found with 1 SQL nodes
2025-06-05 10:16:41,010 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:16:41,010 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17 has 3 immediate successors
2025-06-05 10:16:41,010 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:16:41,010 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has SQL operation: Review Purchase Details
2025-06-05 10:16:41,010 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 has SQL operation: Verify System Compatibility
2025-06-05 10:16:41,010 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has SQL operation: Approve Purchase Order
2025-06-05 10:16:41,010 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has SQL operation: Validate Financial Impact
2025-06-05 10:16:41,010 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG -   Forward path found with 9 SQL nodes
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has SQL operation: Check Budget Availability
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has SQL operation: Review Purchase Details
2025-06-05 10:16:41,011 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 has SQL operation: Verify System Compatibility
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has SQL operation: Approve Purchase Order
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has SQL operation: Validate Financial Impact
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG -   Forward path found with 9 SQL nodes
2025-06-05 10:16:41,012 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has SQL operation: Initiate Inventory Processing
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG -   Forward path found with 2 SQL nodes
2025-06-05 10:16:41,013 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 3 paths (forward analysis)
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 has 2 immediate successors
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 has SQL operation: Approve Purchase Order
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has SQL operation: Validate Financial Impact
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:16:41,013 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG -   Forward path found with 6 SQL nodes
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG -     Forward path stopped at XOR_JOIN gateway
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 has 2 immediate successors
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,014 - parallel_path_analyzer - DEBUG -   Forward path found with 4 SQL nodes
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31 has SQL operation: Prepare for Integration
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 has SQL operation: Path A Integration
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG -     Forward path stopped at AND_JOIN gateway
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG -   Forward path found with 2 SQL nodes
2025-06-05 10:16:41,015 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 2 paths (forward analysis)
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 has 0 immediate successors
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56 has 0 immediate successors
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Gateway 190baa7a-a0e7-4688-a4ec-f25dbe401595 has 0 immediate successors
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Gateway 1196afcf-1b4a-4849-a52c-615dbd677f9c has 0 immediate successors
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Gateway b45b7ee6-ce07-4c2e-994d-0426eccf8e25 has 0 immediate successors
2025-06-05 10:16:41,015 - parallel_path_analyzer - DEBUG - Gateway 373a42b1-afbf-4796-98e2-54e4899c8780 has 0 immediate successors
2025-06-05 10:16:41,016 - parallel_path_analyzer - DEBUG - Gateway 05d33945-a100-4251-a8da-1814ae7acf49 has 0 immediate successors
2025-06-05 10:16:41,016 - parallel_path_analyzer - DEBUG - Gateway e37db572-12fe-4beb-bcdd-b3a23e947632 has 0 immediate successors
2025-06-05 10:16:41,016 - parallel_path_analyzer - INFO - Processing 8 JOIN gateways for backward analysis
2025-06-05 10:16:41,016 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 (OR_JOIN)
2025-06-05 10:16:41,016 - parallel_path_analyzer - DEBUG - Traditional Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has 0 immediate predecessors
2025-06-05 10:16:41,016 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:16:41,016 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18: Found 0 gateway relationships
2025-06-05 10:16:41,016 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18: Found 0 immediate predecessors: []
2025-06-05 10:16:41,017 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 produced 0 scenarios
2025-06-05 10:16:41,017 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 (OR_JOIN)
2025-06-05 10:16:41,017 - parallel_path_analyzer - DEBUG - Traditional Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has 0 immediate predecessors
2025-06-05 10:16:41,017 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,017 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20: Found 0 gateway relationships
2025-06-05 10:16:41,017 - parallel_path_analyzer - DEBUG - Neo4j Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20: Found 0 immediate predecessors: []
2025-06-05 10:16:41,017 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 produced 0 scenarios
2025-06-05 10:16:41,017 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 (OR_JOIN)
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG - Traditional Join 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has 3 immediate predecessors
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 for OR_JOIN
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG -   Backward path found with 1 SQL nodes
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 for OR_JOIN
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has SQL operation: Check Budget Availability
2025-06-05 10:16:41,018 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG -   Backward path found with 1 SQL nodes
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 for OR_JOIN
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 has SQL operation: Finalize Inventory Update
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:16:41,019 - parallel_path_analyzer - DEBUG -   Backward path found with 2 SQL nodes
2025-06-05 10:16:41,019 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:16:41,020 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 produced 1 scenarios
2025-06-05 10:16:41,022 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 07342615-1358-4549-8c2b-050e4aa10352 (OR_JOIN)
2025-06-05 10:16:41,022 - parallel_path_analyzer - DEBUG - Traditional Join 07342615-1358-4549-8c2b-050e4aa10352 has 0 immediate predecessors
2025-06-05 10:16:41,022 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 07342615-1358-4549-8c2b-050e4aa10352
2025-06-05 10:16:41,022 - parallel_path_analyzer - DEBUG - Neo4j Join 07342615-1358-4549-8c2b-050e4aa10352: Found 2 gateway relationships
2025-06-05 10:16:41,022 - parallel_path_analyzer - DEBUG - Neo4j Join 07342615-1358-4549-8c2b-050e4aa10352: Found 2 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16']
2025-06-05 10:16:41,022 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 for OR_JOIN
2025-06-05 10:16:41,022 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 has SQL operation: Process Standard Order
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 for OR_JOIN
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16 has SQL operation: Process Custom Order
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:16:41,023 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:16:41,024 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:16:41,024 - parallel_path_analyzer - INFO - JOIN gateway 07342615-1358-4549-8c2b-050e4aa10352 produced 1 scenarios
2025-06-05 10:16:41,024 - parallel_path_analyzer - DEBUG - Same paths but different gateways: OR_JOIN vs OR_SPLIT
2025-06-05 10:16:41,025 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: bcf0cce2-df40-4c87-822b-17ce53163039 (OR_JOIN)
2025-06-05 10:16:41,025 - parallel_path_analyzer - DEBUG - Traditional Join bcf0cce2-df40-4c87-822b-17ce53163039 has 0 immediate predecessors
2025-06-05 10:16:41,025 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for bcf0cce2-df40-4c87-822b-17ce53163039
2025-06-05 10:16:41,025 - parallel_path_analyzer - DEBUG - Neo4j Join bcf0cce2-df40-4c87-822b-17ce53163039: Found 3 gateway relationships
2025-06-05 10:16:41,025 - parallel_path_analyzer - DEBUG - Neo4j Join bcf0cce2-df40-4c87-822b-17ce53163039: Found 3 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:16:41,025 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 for OR_JOIN
2025-06-05 10:16:41,025 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:16:41,025 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 for OR_JOIN
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 has SQL operation: Check Budget Availability
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 for OR_JOIN
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59 has SQL operation: Finalize Inventory Update
2025-06-05 10:16:41,026 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:16:41,027 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,027 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:16:41,027 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,027 - parallel_path_analyzer - DEBUG -     Backward path stopped at XOR_SPLIT gateway
2025-06-05 10:16:41,027 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 2 SQL nodes
2025-06-05 10:16:41,027 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:16:41,027 - parallel_path_analyzer - INFO - JOIN gateway bcf0cce2-df40-4c87-822b-17ce53163039 produced 1 scenarios
2025-06-05 10:16:41,027 - parallel_path_analyzer - DEBUG - Same paths but different gateways: OR_JOIN vs OR_JOIN
2025-06-05 10:16:41,028 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d (AND_JOIN)
2025-06-05 10:16:41,028 - parallel_path_analyzer - DEBUG - Analyzing AND_JOIN gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG - Traditional Join 2a5b26ec-0f86-4367-b4e4-11bab697253d has 0 immediate predecessors
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG - Neo4j Join 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 gateway relationships
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG - Neo4j Join 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 for AND_JOIN
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,029 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has SQL operation: Initiate Inventory Processing
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 has SQL operation: Update Inventory Quantity
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG -     Added start_node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 to filtered path
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG - Filtered AND_JOIN path from 2 to 1 nodes: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19'] -> ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 for AND_JOIN
2025-06-05 10:16:41,030 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has SQL operation: Update Inventory Order Status
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57 has SQL operation: Initiate Inventory Processing
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 has SQL operation: Update Inventory Order Status
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG -     Added start_node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58 to filtered path
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG - Filtered AND_JOIN path from 2 to 1 nodes: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58'] -> ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:16:41,031 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:16:41,031 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 converging paths with SQL nodes
2025-06-05 10:16:41,031 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:16:41,032 - parallel_path_analyzer - INFO -   Neo4j Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:16:41,032 - parallel_path_analyzer - DEBUG - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 converging paths
2025-06-05 10:16:41,032 - parallel_path_analyzer - DEBUG -   Path 1: 1 nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:16:41,032 - parallel_path_analyzer - DEBUG -   Path 2: 1 nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:16:41,032 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Validation result = True
2025-06-05 10:16:41,032 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Building scenario with 2 paths
2025-06-05 10:16:41,033 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:16:41,033 - parallel_path_analyzer - INFO - JOIN gateway 2a5b26ec-0f86-4367-b4e4-11bab697253d produced 1 scenarios
2025-06-05 10:16:41,033 - parallel_path_analyzer - DEBUG - Same paths but different gateways: AND_JOIN vs OR_SPLIT
2025-06-05 10:16:41,034 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 23646f5e-579a-4b86-9c09-672bf0e221b6 (OR_JOIN)
2025-06-05 10:16:41,034 - parallel_path_analyzer - DEBUG - Traditional Join 23646f5e-579a-4b86-9c09-672bf0e221b6 has 0 immediate predecessors
2025-06-05 10:16:41,034 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 23646f5e-579a-4b86-9c09-672bf0e221b6
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG - Neo4j Join 23646f5e-579a-4b86-9c09-672bf0e221b6: Found 1 gateway relationships
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG - Neo4j Join 23646f5e-579a-4b86-9c09-672bf0e221b6: Found 1 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21']
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 for OR_JOIN
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 has SQL operation: Review Purchase Details
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 has SQL operation: Generate PO Request
2025-06-05 10:16:41,035 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 2 SQL nodes
2025-06-05 10:16:41,036 - parallel_path_analyzer - INFO - JOIN gateway 23646f5e-579a-4b86-9c09-672bf0e221b6 produced 0 scenarios
2025-06-05 10:16:41,036 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4 (AND_JOIN)
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG - Analyzing AND_JOIN gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG - Traditional Join 389cc933-78d3-4cbf-adae-cdc01615cbe4 has 0 immediate predecessors
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG - No traditional predecessors found, trying Neo4j gateway method for 389cc933-78d3-4cbf-adae-cdc01615cbe4
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG - Neo4j Join 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 gateway relationships
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG - Neo4j Join 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 immediate predecessors: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG - Tracing backward from 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 for AND_JOIN
2025-06-05 10:16:41,036 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 has SQL operation: Update Customer Order Status
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 has SQL operation: Notify Vendors
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG -     Moving to previous node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,037 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 has SQL operation: Complete Purchase Order
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG -     Found SQL node: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG -     Backward path stopped at AND_SPLIT gateway
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG - Node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 has SQL operation: Record Financial Transaction
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG -     Added start_node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 to filtered path
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG - Filtered AND_JOIN path from 4 to 1 nodes: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] -> ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG -   Neo4j backward path found with 1 SQL nodes
2025-06-05 10:16:41,038 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 converging paths with SQL nodes
2025-06-05 10:16:41,038 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG - AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 converging paths
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG -   Path 1: 1 nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:16:41,038 - parallel_path_analyzer - DEBUG - AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Only 1 path(s) found - insufficient for parallel analysis
2025-06-05 10:16:41,039 - parallel_path_analyzer - INFO - JOIN gateway 389cc933-78d3-4cbf-adae-cdc01615cbe4 produced 0 scenarios
2025-06-05 10:16:41,039 - parallel_path_analyzer - INFO - Found 9 parallel execution scenarios
2025-06-05 10:16:41,039 - __main__ - INFO - Identified 9 parallel execution scenarios
2025-06-05 10:16:41,039 - deadlock_detector - DEBUG - Initializing DeadlockDetector
2025-06-05 10:16:41,039 - __main__ - INFO - Running analysis in 'full' mode
2025-06-05 10:16:41,039 - __main__ - INFO - Executing standard deadlock analysis...
2025-06-05 10:16:41,039 - deadlock_detector - INFO - Analyzing deadlocks across 9 parallel scenarios...
2025-06-05 10:16:41,039 - deadlock_detector - DEBUG - Building resource dependency graph...
2025-06-05 10:16:41,039 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15, data type: <class 'dict'>, data: {'name': 'Process Standard Order', 'sql': "UPDATE Orders SET Status = 'Processing' WHERE OrderID = @orderID AND OrderType = 'Standard'", 'resources': {'tables': {'ORDERS'}, 'columns': {'STATUS', 'ORDERID', 'ORDERTYPE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'STANDARD', 'raw_condition': "ORDERTYPE = 'STANDARD'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,040 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16, data type: <class 'dict'>, data: {'name': 'Process Custom Order', 'sql': "UPDATE Orders SET Status = 'Processing',CustomRequirements = @requirementsWHERE OrderID = @orderID AND OrderType = 'Custom'", 'resources': {'tables': {'ORDERS'}, 'columns': {'STATUS', 'ORDERID', 'ORDERTYPE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}, {'column': 'ORDERTYPE', 'operator': '=', 'value': 'CUSTOM', 'raw_condition': "ORDERTYPE = 'CUSTOM'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,040 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17, data type: <class 'dict'>, data: {'name': 'Create Purchase Requisition', 'sql': "INSERT INTO PurchaseRequisitions(ReqID, OrderID, RequestDate, Status, Department)VALUES (@reqID, @orderID, GETDATE(), 'New', 'Procurement')", 'resources': {'tables': {'PURCHASEREQUISITIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,040 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18, data type: <class 'dict'>, data: {'name': 'Generate PO Request', 'sql': "INSERT INTO PurchaseOrders(POID, ReqID, VendorID, PODate, Status)VALUES (@poID, @reqID, @vendorID, GETDATE(), 'Draft')", 'resources': {'tables': {'PURCHASEORDERS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,040 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19, data type: <class 'dict'>, data: {'name': 'Update Inventory Quantity', 'sql': "UPDATE OrderDetails SET InventoryStatus = 'Reserved' WHERE OrderDetailID = @orderDetailID AND ItemID = @itemID;", 'resources': {'tables': {'ORDERDETAILS'}, 'columns': {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERDETAILID', 'operator': '=', 'value': '@ORDERDETAILID', 'raw_condition': "ORDERDETAILID = '@ORDERDETAILID'"}, {'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,040 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20, data type: <class 'dict'>, data: {'name': 'Check Budget Availability', 'sql': 'DECLARE @available DECIMAL(18,2);SELECT @available = RemainingBudgetFROM DepartmentBudgetsWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE()); IF @available >= @estimatedCostUPDATE DepartmentBudgetsSET AllocatedAmount = AllocatedAmount + @estimatedCost,RemainingBudget = RemainingBudget - @estimatedCostWHERE DepartmentID = @deptID AND FiscalYear = YEAR(GETDATE());', 'resources': {'tables': {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, 'columns': {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}, {'column': 'DEPARTMENTID', 'operator': '=', 'value': '@DEPTID', 'raw_condition': "DEPARTMENTID = '@DEPTID'"}, {'column': 'FISCALYEAR', 'operator': '=', 'value': 'YEAR(GETDATE());', 'raw_condition': "FISCALYEAR = 'YEAR(GETDATE());'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,040 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21, data type: <class 'dict'>, data: {'name': 'Review Purchase Details', 'sql': 'SELECT po.*, v.VendorName, v.ContactPersonFROM PurchaseOrders poJOIN Vendors v ON po.VendorID = v.VendorIDWHERE po.POID = @poID', 'resources': {'tables': {'PURCHASEORDERS', 'VENDORS'}, 'columns': {'POID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,040 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22, data type: <class 'dict'>, data: {'name': 'Verify System Compatibility', 'sql': 'SELECT i.ItemID, i.ItemName, i.CompatibilityFlags,s.SystemID, s.SystemName, s.VersionFROM Inventory iJOIN Systems s ON i.SystemID = s.SystemIDWHERE i.ItemID IN (SELECT ItemID FROM OrderDetails WHERE OrderID = @orderID)', 'resources': {'tables': {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, 'columns': {'ITEMID', 'ORDERID'}, 'operations': {'SELECT'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID)', 'raw_condition': "ORDERID = '@ORDERID)'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,041 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23, data type: <class 'dict'>, data: {'name': 'Approve Purchase Order', 'sql': "UPDATE PurchaseOrdersSET Status = 'Approved', ApprovedBy = @userID, ApprovalDate = GETDATE()WHERE POID = @poID", 'resources': {'tables': {'PURCHASEORDERSSET'}, 'columns': {'POID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,041 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24, data type: <class 'dict'>, data: {'name': 'Validate Financial Impact', 'sql': 'INSERT INTO FinancialValidations(ValidationID, POID, ValidatedBy, ValidationDate, Comments)VALUES (@validationID, @poID, @userID, GETDATE(), @comments)', 'resources': {'tables': {'FINANCIALVALIDATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,041 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25, data type: <class 'dict'>, data: {'name': 'Complete Purchase Order', 'sql': "UPDATE PurchaseOrdersSET Status = 'Completed', CompletedDate = GETDATE()WHERE POID = @poID", 'resources': {'tables': {'PURCHASEORDERSSET'}, 'columns': {'POID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'POID', 'operator': '=', 'value': '@POID', 'raw_condition': "POID = '@POID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,041 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27, data type: <class 'dict'>, data: {'name': 'Notify Vendors', 'sql': "INSERT INTO VendorNotifications(NotificationID, VendorID, POID, NotificationDate, NotificationType)VALUES (@notificationID, @vendorID, @poID, GETDATE(), 'PO_Completion')", 'resources': {'tables': {'VENDORNOTIFICATIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,041 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28, data type: <class 'dict'>, data: {'name': 'Update Customer Order Status', 'sql': "UPDATE OrdersSET Status = 'Fulfilled', FulfillmentDate = GETDATE()WHERE OrderID = @orderID", 'resources': {'tables': {'ORDERSSET'}, 'columns': {'STATUS', 'ORDERID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ORDERID', 'operator': '=', 'value': '@ORDERID', 'raw_condition': "ORDERID = '@ORDERID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,041 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29, data type: <class 'dict'>, data: {'name': 'Record Financial Transaction', 'sql': "INSERT INTO FinancialTransactions(TransactionID, POID, OrderID, Amount, TransactionDate, TransactionType)VALUES (@transactionID, @poID, @orderID, @amount, GETDATE(), 'Order_Fulfillment')", 'resources': {'tables': {'FINANCIALTRANSACTIONS'}, 'columns': set(), 'operations': {'INSERT'}, 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,041 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31, data type: <class 'dict'>, data: {'name': 'Prepare for Integration', 'sql': 'UPDATE IntegrationLogsSET PreparationComplete = 1,PreparedBy = @userIDWHERE LogID = @logID', 'resources': {'tables': {'INTEGRATIONLOGSSET'}, 'columns': {'PREPARATIONCOMPLETE', 'LOGID'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'LOGID', 'operator': '=', 'value': '@LOGID', 'raw_condition': "LOGID = '@LOGID'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,042 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32, data type: <class 'dict'>, data: {'name': 'Path A Integration', 'sql': 'EXEC sp_IntegrateSystemA @logID, @processID', 'resources': {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,042 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56, data type: <class 'dict'>, data: {'name': 'Path B Integration', 'sql': 'EXEC sp_IntegrateSystemB @logID, @processID', 'resources': {'tables': set(), 'columns': set(), 'operations': set(), 'where_conditions': []}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,042 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57, data type: <class 'dict'>, data: {'name': 'Initiate Inventory Processing', 'sql': 'BEGIN TRANSACTION;UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @orderQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;COMMIT;', 'resources': {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,042 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58, data type: <class 'dict'>, data: {'name': 'Update Inventory Order Status', 'sql': 'UPDATE Inventory SET QuantityAvailable = QuantityAvailable - @additionalQty, LastUpdated = GETDATE() WHERE ItemID = @itemID;', 'resources': {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'QUANTITYAVAILABLE'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,042 - deadlock_detector - DEBUG - Processing node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59, data type: <class 'dict'>, data: {'name': 'Finalize Inventory Update', 'sql': "UPDATE Inventory SET Status = 'Processed', LastProcessedTime = GETDATE() WHERE ItemID = @itemID;", 'resources': {'tables': {'INVENTORY'}, 'columns': {'ITEMID', 'STATUS'}, 'operations': {'UPDATE'}, 'where_conditions': [{'column': 'ITEMID', 'operator': '=', 'value': '@ITEMID;', 'raw_condition': "ITEMID = '@ITEMID;'"}]}, 'labels': ['Task_Service']}
2025-06-05 10:16:41,043 - deadlock_detector - DEBUG - Added 20 SQL nodes to resource graph
2025-06-05 10:16:41,043 - deadlock_detector - INFO - Building wait-for graph from 9 scenarios...
2025-06-05 10:16:41,043 - deadlock_detector - INFO - Scenario types to process: ['OR_SPLIT', 'OR_SPLIT', 'OR_SPLIT', 'AND_SPLIT', 'AND_SPLIT', 'OR_JOIN', 'OR_JOIN', 'OR_JOIN', 'AND_JOIN']
2025-06-05 10:16:41,043 - deadlock_detector - INFO - Processing scenario 1/9: OR_SPLIT
2025-06-05 10:16:41,043 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:16:41,043 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_SPLIT
2025-06-05 10:16:41,043 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56']
2025-06-05 10:16:41,043 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56
2025-06-05 10:16:41,043 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,043 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32) <-> Path B Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56)
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG -     Node1 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG -   [X] FILTERED: Path A Integration <-> Path B Integration - no shared tables or columns
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:16:41,044 - deadlock_detector - INFO - Processing scenario 2/9: OR_SPLIT
2025-06-05 10:16:41,044 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:16:41,044 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_SPLIT
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19) <-> Update Inventory Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58)
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,045 - deadlock_detector - DEBUG -     Gateway validation (OR_SPLIT): False
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG -   [X] FILTERED: Update Inventory Quantity <-> Update Inventory Order Status - enhanced gateway validation failed
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:16:41,046 - deadlock_detector - INFO - Processing scenario 3/9: OR_SPLIT
2025-06-05 10:16:41,046 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_SPLIT
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16']
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16
2025-06-05 10:16:41,046 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,047 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Process Standard Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15) <-> Process Custom Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16)
2025-06-05 10:16:41,047 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID', 'ORDERTYPE'}
2025-06-05 10:16:41,047 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID', 'ORDERTYPE'}
2025-06-05 10:16:41,047 - deadlock_detector - DEBUG -     Table overlap: {'ORDERS'}
2025-06-05 10:16:41,047 - deadlock_detector - DEBUG -     Column overlap: {'STATUS', 'ORDERID', 'ORDERTYPE'}
2025-06-05 10:16:41,047 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,047 - deadlock_detector - DEBUG -     Gateway validation (OR_SPLIT): True
2025-06-05 10:16:41,048 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,048 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,048 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Process Standard Order vs Process Custom Order (Severity: HIGH)
2025-06-05 10:16:41,048 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,048 - deadlock_detector - DEBUG -     Total conflicts found: 1
2025-06-05 10:16:41,048 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_SPLIT
2025-06-05 10:16:41,048 - deadlock_detector - INFO - Processing scenario 4/9: AND_SPLIT
2025-06-05 10:16:41,048 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 3 paths
2025-06-05 10:16:41,048 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in AND_SPLIT
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,049 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -     Table overlap: {'PURCHASEORDERS'}
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Review Purchase Details - enhanced gateway validation failed
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,050 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,051 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,052 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,053 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,053 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,053 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,053 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,053 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,053 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,053 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:16:41,054 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,055 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,056 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,057 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,058 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,059 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,059 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,059 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,059 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,059 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:16:41,059 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,059 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Approve Purchase Order - enhanced gateway validation failed
2025-06-05 10:16:41,060 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,061 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Complete Purchase Order - enhanced gateway validation failed
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,062 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,063 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,064 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,065 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,066 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,067 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,068 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,069 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,070 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,071 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -     Column overlap: {'ORDERID'}
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Update Customer Order Status - enhanced gateway validation failed
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,072 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,073 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,074 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Review Purchase Details - enhanced gateway validation failed
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,075 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,076 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,076 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,076 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,076 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:16:41,076 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,076 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,076 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,077 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -     Table overlap: {'PURCHASEORDERSSET'}
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -     Column overlap: {'POID', 'STATUS'}
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,078 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): True
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,079 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Approve Purchase Order <-> Complete Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Approve Purchase Order vs Complete Purchase Order (Severity: HIGH)
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,079 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,080 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Update Customer Order Status - enhanced gateway validation failed
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,081 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,082 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,083 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,083 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,083 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,083 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,083 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,083 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,083 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:16:41,084 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,085 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,086 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,087 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:16:41,088 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,089 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,090 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -     Column overlap: {'POID'}
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,091 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Review Purchase Details - enhanced gateway validation failed
2025-06-05 10:16:41,092 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,093 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -     Table overlap: {'PURCHASEORDERSSET'}
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -     Column overlap: {'POID', 'STATUS'}
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): True
2025-06-05 10:16:41,094 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,094 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Complete Purchase Order <-> Approve Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,095 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Complete Purchase Order vs Approve Purchase Order (Severity: HIGH)
2025-06-05 10:16:41,095 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,095 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,095 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,095 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,095 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,095 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,096 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,097 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Update Customer Order Status - enhanced gateway validation failed
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,098 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,099 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,100 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,101 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,102 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:16:41,102 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,102 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,102 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,102 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,102 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,102 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,103 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:16:41,104 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,105 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,106 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,107 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,108 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,108 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,108 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,108 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,108 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,108 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,108 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -     Column overlap: {'ORDERID'}
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: True
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,109 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Verify System Compatibility - enhanced gateway validation failed
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,110 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Approve Purchase Order - enhanced gateway validation failed
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,111 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -     Column overlap: {'STATUS'}
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,112 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Complete Purchase Order - enhanced gateway validation failed
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,113 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29)
2025-06-05 10:16:41,114 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Record Financial Transaction - no shared tables or columns
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,115 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21)
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Review Purchase Details - no shared tables or columns
2025-06-05 10:16:41,116 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22)
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Verify System Compatibility - no shared tables or columns
2025-06-05 10:16:41,117 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23)
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Approve Purchase Order - no shared tables or columns
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24
2025-06-05 10:16:41,118 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24)
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -     Node2 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Validate Financial Impact - no shared tables or columns
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,119 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25)
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -     Node2 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Complete Purchase Order - no shared tables or columns
2025-06-05 10:16:41,120 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27)
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -     Node2 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Notify Vendors - no shared tables or columns
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28
2025-06-05 10:16:41,121 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28)
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Update Customer Order Status - no shared tables or columns
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29
2025-06-05 10:16:41,122 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -     Total conflicts found: 2
2025-06-05 10:16:41,123 - deadlock_detector - INFO - Found 2 conflicts between paths in AND_SPLIT
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG - Comparing path 1 vs path 3 in AND_SPLIT
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,123 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,124 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,125 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,126 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,127 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -     Table overlap: {'INVENTORY'}
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Initiate Inventory Processing - enhanced gateway validation failed
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,128 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -     Table overlap: {'ORDERDETAILS'}
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Update Inventory Quantity - enhanced gateway validation failed
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,129 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,130 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,131 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,132 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,133 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,134 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,135 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,136 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,137 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,138 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,139 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,140 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 3
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG - Comparing path 2 vs path 3 in AND_SPLIT
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,141 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,142 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,143 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Review Purchase Details (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS', 'VENDORS'}, Operations: {'SELECT'}, Columns: {'POID'}
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,144 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -   [X] FILTERED: Review Purchase Details <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -     Table overlap: {'INVENTORY'}
2025-06-05 10:16:41,145 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Initiate Inventory Processing - enhanced gateway validation failed
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Verify System Compatibility (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS', 'SYSTEMS', 'INVENTORY'}, Operations: {'SELECT'}, Columns: {'ITEMID', 'ORDERID'}
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -     Table overlap: {'ORDERDETAILS'}
2025-06-05 10:16:41,146 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -     Has write-write: set(), Has write-read: {'UPDATE'}
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -     Gateway validation (AND_SPLIT): False
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -   [X] FILTERED: Verify System Compatibility <-> Update Inventory Quantity - enhanced gateway validation failed
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,147 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Approve Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,148 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -   [X] FILTERED: Approve Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,149 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Validate Financial Impact (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALVALIDATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,150 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -   [X] FILTERED: Validate Financial Impact <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,151 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,152 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,153 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,154 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,155 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,156 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Initiate Inventory Processing (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57)
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Initiate Inventory Processing - no shared tables or columns
2025-06-05 10:16:41,157 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,158 - deadlock_detector - DEBUG - No conflicts found between paths 2 and 3
2025-06-05 10:16:41,158 - deadlock_detector - INFO - Processing scenario 5/9: AND_SPLIT
2025-06-05 10:16:41,159 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 2 paths
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in AND_SPLIT
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32']
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'PREPARATIONCOMPLETE', 'LOGID'}
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,159 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Complete Purchase Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERSSET'}, Operations: {'UPDATE'}, Columns: {'POID', 'STATUS'}
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -   [X] FILTERED: Complete Purchase Order <-> Path A Integration - no shared tables or columns
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,160 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'PREPARATIONCOMPLETE', 'LOGID'}
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:16:41,161 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Notify Vendors (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -     Node1 - Tables: {'VENDORNOTIFICATIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,162 - deadlock_detector - DEBUG -   [X] FILTERED: Notify Vendors <-> Path A Integration - no shared tables or columns
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'PREPARATIONCOMPLETE', 'LOGID'}
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,163 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Customer Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERSSET'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID'}
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -   [X] FILTERED: Update Customer Order Status <-> Path A Integration - no shared tables or columns
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,164 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Prepare for Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31)
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -     Node2 - Tables: {'INTEGRATIONLOGSSET'}, Operations: {'UPDATE'}, Columns: {'PREPARATIONCOMPLETE', 'LOGID'}
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Prepare for Integration - no shared tables or columns
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Record Financial Transaction (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29) <-> Path A Integration (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32)
2025-06-05 10:16:41,165 - deadlock_detector - DEBUG -     Node1 - Tables: {'FINANCIALTRANSACTIONS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG -     Node2 - Tables: set(), Operations: set(), Columns: set()
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG -   [X] FILTERED: Record Financial Transaction <-> Path A Integration - no shared tables or columns
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:16:41,166 - deadlock_detector - INFO - Processing scenario 6/9: OR_JOIN
2025-06-05 10:16:41,166 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:16:41,166 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_JOIN
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20']
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,167 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG - Comparing path 1 vs path 3 in OR_JOIN
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,168 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,169 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 3
2025-06-05 10:16:41,170 - deadlock_detector - DEBUG - Comparing path 2 vs path 3 in OR_JOIN
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,171 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,172 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG - No conflicts found between paths 2 and 3
2025-06-05 10:16:41,173 - deadlock_detector - INFO - Processing scenario 7/9: OR_JOIN
2025-06-05 10:16:41,173 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 2 paths
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_JOIN
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16']
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Process Standard Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15) <-> Process Custom Order (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16)
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID', 'ORDERTYPE'}
2025-06-05 10:16:41,173 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERS'}, Operations: {'UPDATE'}, Columns: {'STATUS', 'ORDERID', 'ORDERTYPE'}
2025-06-05 10:16:41,174 - deadlock_detector - DEBUG -     Table overlap: {'ORDERS'}
2025-06-05 10:16:41,174 - deadlock_detector - DEBUG -     Column overlap: {'STATUS', 'ORDERID', 'ORDERTYPE'}
2025-06-05 10:16:41,174 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,174 - deadlock_detector - DEBUG -     Gateway validation (OR_JOIN): True
2025-06-05 10:16:41,174 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,174 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,174 - deadlock_detector - DEBUG - Found WRITE_WRITE_SAME_TABLE conflict: Process Standard Order vs Process Custom Order (Severity: HIGH)
2025-06-05 10:16:41,174 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_SAME_TABLE
2025-06-05 10:16:41,175 - deadlock_detector - DEBUG -     Total conflicts found: 1
2025-06-05 10:16:41,175 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_JOIN
2025-06-05 10:16:41,175 - deadlock_detector - INFO - Processing scenario 8/9: OR_JOIN
2025-06-05 10:16:41,175 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:16:41,175 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in OR_JOIN
2025-06-05 10:16:41,175 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20']
2025-06-05 10:16:41,175 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20
2025-06-05 10:16:41,175 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,175 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20)
2025-06-05 10:16:41,175 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -     Node2 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Check Budget Availability - no shared tables or columns
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 2
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG - Comparing path 1 vs path 3 in OR_JOIN
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,176 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:16:41,177 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Generate PO Request (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -     Node1 - Tables: {'PURCHASEORDERS'}, Operations: {'INSERT'}, Columns: set()
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -   [X] FILTERED: Generate PO Request <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG - No conflicts found between paths 1 and 3
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG - Comparing path 2 vs path 3 in OR_JOIN
2025-06-05 10:16:41,178 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19', '4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59']
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19)
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -     Node2 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Update Inventory Quantity - no shared tables or columns
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,179 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59
2025-06-05 10:16:41,180 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,180 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Check Budget Availability (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20) <-> Finalize Inventory Update (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59)
2025-06-05 10:16:41,180 - deadlock_detector - DEBUG -     Node1 - Tables: {'DEPARTMENTBUDGETSSET', 'DEPARTMENTBUDGETSWHERE'}, Operations: {'SELECT'}, Columns: {'DEPARTMENTID', 'FISCALYEAR', 'ALLOCATEDAMOUNT'}
2025-06-05 10:16:41,180 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'STATUS'}
2025-06-05 10:16:41,180 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,180 - deadlock_detector - DEBUG -     Column overlap: set()
2025-06-05 10:16:41,180 - deadlock_detector - DEBUG -   [X] FILTERED: Check Budget Availability <-> Finalize Inventory Update - no shared tables or columns
2025-06-05 10:16:41,181 - deadlock_detector - DEBUG -         [NONE] No conflict found
2025-06-05 10:16:41,181 - deadlock_detector - DEBUG -     Total conflicts found: 0
2025-06-05 10:16:41,181 - deadlock_detector - DEBUG - No conflicts found between paths 2 and 3
2025-06-05 10:16:41,181 - deadlock_detector - INFO - Processing scenario 9/9: AND_JOIN
2025-06-05 10:16:41,181 - deadlock_detector - INFO - Analyzing scenario: AND_JOIN with 2 paths
2025-06-05 10:16:41,181 - deadlock_detector - INFO - Processing AND_JOIN scenario - Gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:16:41,181 - deadlock_detector - INFO -   AND_JOIN Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:16:41,181 - deadlock_detector - INFO -   AND_JOIN Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:16:41,181 - deadlock_detector - DEBUG - Comparing path 1 vs path 2 in AND_JOIN
2025-06-05 10:16:41,181 - deadlock_detector - DEBUG -     Analyzing conflicts between Path 1: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19'] and Path 2: ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -       Checking nodes: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19 vs 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -         Both nodes have SQL resources - analyzing conflict
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -   ANALYZING CONFLICT: Update Inventory Quantity (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19) <-> Update Inventory Order Status (4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58)
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -     Node1 - Tables: {'ORDERDETAILS'}, Operations: {'UPDATE'}, Columns: {'ORDERDETAILID', 'INVENTORYSTATUS', 'ITEMID'}
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -     Node2 - Tables: {'INVENTORY'}, Operations: {'UPDATE'}, Columns: {'ITEMID', 'QUANTITYAVAILABLE'}
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -     Table overlap: set()
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -     Column overlap: {'ITEMID'}
2025-06-05 10:16:41,182 - deadlock_detector - DEBUG -     Has write-write: {'UPDATE'}, Has write-read: False
2025-06-05 10:16:41,183 - deadlock_detector - DEBUG -     Gateway validation (AND_JOIN): True
2025-06-05 10:16:41,183 - deadlock_detector - DEBUG -     Conflict type: WRITE_WRITE_CROSS_TABLE
2025-06-05 10:16:41,183 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Update Inventory Quantity <-> Update Inventory Order Status - WRITE_WRITE_CROSS_TABLE
2025-06-05 10:16:41,183 - deadlock_detector - DEBUG - Found WRITE_WRITE_CROSS_TABLE conflict: Update Inventory Quantity vs Update Inventory Order Status (Severity: CRITICAL)
2025-06-05 10:16:41,183 - deadlock_detector - DEBUG -         [FOUND] Conflict detected: WRITE_WRITE_CROSS_TABLE
2025-06-05 10:16:41,183 - deadlock_detector - DEBUG -     Total conflicts found: 1
2025-06-05 10:16:41,183 - deadlock_detector - INFO - Found 1 conflicts between paths in AND_JOIN
2025-06-05 10:16:41,183 - deadlock_detector - INFO - Wait-for graph built with 6 nodes and 6 edges
2025-06-05 10:16:41,183 - deadlock_detector - INFO - Detecting deadlock cycles using Tarjan's algorithm...
2025-06-05 10:16:41,184 - deadlock_detector - INFO - Found 3 potential deadlock cycles
2025-06-05 10:16:41,184 - deadlock_detector - INFO - Deadlock analysis completed. Found 3 potential deadlock cycles
2025-06-05 10:16:41,184 - report_generator - INFO - Generating comprehensive deadlock analysis report...
2025-06-05 10:16:41,184 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:15, data type: <class 'dict'>
2025-06-05 10:16:41,184 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:16, data type: <class 'dict'>
2025-06-05 10:16:41,184 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:17, data type: <class 'dict'>
2025-06-05 10:16:41,184 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18, data type: <class 'dict'>
2025-06-05 10:16:41,184 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:22, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:23, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:24, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:25, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:27, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:28, data type: <class 'dict'>
2025-06-05 10:16:41,185 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29, data type: <class 'dict'>
2025-06-05 10:16:41,186 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:31, data type: <class 'dict'>
2025-06-05 10:16:41,186 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:32, data type: <class 'dict'>
2025-06-05 10:16:41,186 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:56, data type: <class 'dict'>
2025-06-05 10:16:41,186 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:57, data type: <class 'dict'>
2025-06-05 10:16:41,186 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58, data type: <class 'dict'>
2025-06-05 10:16:41,186 - report_generator - DEBUG - Formatting node 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:59, data type: <class 'dict'>
2025-06-05 10:16:41,188 - report_generator - INFO - Report saved successfully to results\deadlock_analysis_report_20250605_101638.json
2025-06-05 10:16:41,188 - report_generator - INFO - Comprehensive report saved to: results\deadlock_analysis_report_20250605_101638.json
2025-06-05 10:16:41,190 - __main__ - INFO - Deadlock analysis completed successfully.
2025-06-05 10:16:41,190 - __main__ - INFO - Reports saved to: results
2025-06-05 10:16:41,190 - neo4j.pool - DEBUG - [#0000]  _: <POOL> close
2025-06-05 10:16:41,190 - neo4j.io - DEBUG - [#EA3F]  C: GOODBYE
2025-06-05 10:16:41,190 - neo4j.io - DEBUG - [#EA3F]  C: <CLOSE>
2025-06-05 10:16:41,190 - neo4j_connector - DEBUG - Neo4j connection closed
2025-06-05 10:16:41,190 - __main__ - INFO - Neo4j connection closed.
2025-06-05 10:18:10,543 - __main__ - INFO - Starting Flexible Deadlock Detection System...
2025-06-05 10:18:10,544 - __main__ - INFO - Initializing system components...
2025-06-05 10:18:10,544 - __main__ - INFO - Testing Neo4j connection...
2025-06-05 10:18:12,601 - neo4j_connector - INFO - Neo4j connection test successful
2025-06-05 10:18:12,601 - __main__ - INFO - Fetching graph data from Neo4j...
2025-06-05 10:18:12,606 - neo4j_connector - INFO - Fetched 33 nodes and 37 relationships
2025-06-05 10:18:12,606 - __main__ - INFO - Found 33 nodes and 37 relationships
2025-06-05 10:18:12,606 - __main__ - INFO - Extracting SQL resources from graph data...
2025-06-05 10:18:12,606 - sql_resource_extractor - INFO - Extracting SQL resources from graph data...
2025-06-05 10:18:12,628 - sql_resource_extractor - INFO - Found 20 nodes with SQL operations
2025-06-05 10:18:12,628 - __main__ - INFO - Extracted SQL resources from 20 nodes
2025-06-05 10:18:12,628 - __main__ - INFO - Analyzing parallel execution paths...
2025-06-05 10:18:12,628 - parallel_path_analyzer - INFO - Identifying parallel execution paths...
2025-06-05 10:18:12,629 - parallel_path_analyzer - INFO - Total gateways identified: 34
2025-06-05 10:18:12,629 - parallel_path_analyzer - INFO - Gateway type distribution: {'AND_SPLIT': 5, 'OR_SPLIT': 19, 'UNKNOWN': 2, 'OR_JOIN': 6, 'AND_JOIN': 2}
2025-06-05 10:18:12,629 - parallel_path_analyzer - INFO - Found 32 realistic gateways for parallel analysis
2025-06-05 10:18:12,629 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:18:12,629 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:18:12,629 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:18:12,629 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 3 paths (forward analysis)
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 2 paths (forward analysis)
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - Processing 8 JOIN gateways for backward analysis
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 (OR_JOIN)
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 produced 0 scenarios
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 (OR_JOIN)
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 produced 0 scenarios
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 (OR_JOIN)
2025-06-05 10:18:12,630 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:18:12,631 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 produced 1 scenarios
2025-06-05 10:18:12,633 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 07342615-1358-4549-8c2b-050e4aa10352 (OR_JOIN)
2025-06-05 10:18:12,633 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:18:12,633 - parallel_path_analyzer - INFO - JOIN gateway 07342615-1358-4549-8c2b-050e4aa10352 produced 1 scenarios
2025-06-05 10:18:12,634 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: bcf0cce2-df40-4c87-822b-17ce53163039 (OR_JOIN)
2025-06-05 10:18:12,635 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:18:12,635 - parallel_path_analyzer - INFO - JOIN gateway bcf0cce2-df40-4c87-822b-17ce53163039 produced 1 scenarios
2025-06-05 10:18:12,636 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d (AND_JOIN)
2025-06-05 10:18:12,636 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 converging paths with SQL nodes
2025-06-05 10:18:12,636 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:18:12,636 - parallel_path_analyzer - INFO -   Neo4j Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:18:12,636 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Validation result = True
2025-06-05 10:18:12,636 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Building scenario with 2 paths
2025-06-05 10:18:12,637 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:18:12,638 - parallel_path_analyzer - INFO - JOIN gateway 2a5b26ec-0f86-4367-b4e4-11bab697253d produced 1 scenarios
2025-06-05 10:18:12,639 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 23646f5e-579a-4b86-9c09-672bf0e221b6 (OR_JOIN)
2025-06-05 10:18:12,639 - parallel_path_analyzer - INFO - JOIN gateway 23646f5e-579a-4b86-9c09-672bf0e221b6 produced 0 scenarios
2025-06-05 10:18:12,639 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4 (AND_JOIN)
2025-06-05 10:18:12,639 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 converging paths with SQL nodes
2025-06-05 10:18:12,639 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:18:12,639 - parallel_path_analyzer - INFO - JOIN gateway 389cc933-78d3-4cbf-adae-cdc01615cbe4 produced 0 scenarios
2025-06-05 10:18:12,639 - parallel_path_analyzer - INFO - Found 9 parallel execution scenarios
2025-06-05 10:18:12,640 - __main__ - INFO - Identified 9 parallel execution scenarios
2025-06-05 10:18:12,640 - __main__ - INFO - Running analysis in 'full' mode
2025-06-05 10:18:12,640 - __main__ - INFO - Executing standard deadlock analysis...
2025-06-05 10:18:12,640 - deadlock_detector - INFO - Analyzing deadlocks across 9 parallel scenarios...
2025-06-05 10:18:12,640 - deadlock_detector - INFO - Building wait-for graph from 9 scenarios...
2025-06-05 10:18:12,640 - deadlock_detector - INFO - Scenario types to process: ['OR_SPLIT', 'OR_SPLIT', 'OR_SPLIT', 'AND_SPLIT', 'AND_SPLIT', 'OR_JOIN', 'OR_JOIN', 'OR_JOIN', 'AND_JOIN']
2025-06-05 10:18:12,640 - deadlock_detector - INFO - Processing scenario 1/9: OR_SPLIT
2025-06-05 10:18:12,640 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:18:12,641 - deadlock_detector - INFO - Processing scenario 2/9: OR_SPLIT
2025-06-05 10:18:12,641 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:18:12,641 - deadlock_detector - INFO - Processing scenario 3/9: OR_SPLIT
2025-06-05 10:18:12,641 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:18:12,641 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:18:12,641 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_SPLIT
2025-06-05 10:18:12,641 - deadlock_detector - INFO - Processing scenario 4/9: AND_SPLIT
2025-06-05 10:18:12,641 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 3 paths
2025-06-05 10:18:12,642 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Approve Purchase Order <-> Complete Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:18:12,642 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Complete Purchase Order <-> Approve Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:18:12,642 - deadlock_detector - INFO - Found 2 conflicts between paths in AND_SPLIT
2025-06-05 10:18:12,642 - deadlock_detector - INFO - Processing scenario 5/9: AND_SPLIT
2025-06-05 10:18:12,642 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 2 paths
2025-06-05 10:18:12,643 - deadlock_detector - INFO - Processing scenario 6/9: OR_JOIN
2025-06-05 10:18:12,643 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:18:12,643 - deadlock_detector - INFO - Processing scenario 7/9: OR_JOIN
2025-06-05 10:18:12,643 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 2 paths
2025-06-05 10:18:12,643 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:18:12,643 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_JOIN
2025-06-05 10:18:12,643 - deadlock_detector - INFO - Processing scenario 8/9: OR_JOIN
2025-06-05 10:18:12,644 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:18:12,644 - deadlock_detector - INFO - Processing scenario 9/9: AND_JOIN
2025-06-05 10:18:12,644 - deadlock_detector - INFO - Analyzing scenario: AND_JOIN with 2 paths
2025-06-05 10:18:12,644 - deadlock_detector - INFO - Processing AND_JOIN scenario - Gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:18:12,644 - deadlock_detector - INFO -   AND_JOIN Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:18:12,644 - deadlock_detector - INFO -   AND_JOIN Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:18:12,644 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Update Inventory Quantity <-> Update Inventory Order Status - WRITE_WRITE_CROSS_TABLE
2025-06-05 10:18:12,644 - deadlock_detector - INFO - Found 1 conflicts between paths in AND_JOIN
2025-06-05 10:18:12,645 - deadlock_detector - INFO - Wait-for graph built with 6 nodes and 6 edges
2025-06-05 10:18:12,645 - deadlock_detector - INFO - Detecting deadlock cycles using Tarjan's algorithm...
2025-06-05 10:18:12,645 - deadlock_detector - INFO - Found 3 potential deadlock cycles
2025-06-05 10:18:12,646 - deadlock_detector - INFO - Deadlock analysis completed. Found 3 potential deadlock cycles
2025-06-05 10:18:12,646 - report_generator - INFO - Generating comprehensive deadlock analysis report...
2025-06-05 10:18:12,648 - report_generator - INFO - Report saved successfully to results\deadlock_analysis_report_20250605_101810.json
2025-06-05 10:18:12,648 - report_generator - INFO - Comprehensive report saved to: results\deadlock_analysis_report_20250605_101810.json
2025-06-05 10:18:12,649 - __main__ - INFO - Deadlock analysis completed successfully.
2025-06-05 10:18:12,649 - __main__ - INFO - Reports saved to: results
2025-06-05 10:18:12,650 - __main__ - INFO - Neo4j connection closed.
2025-06-05 10:20:37,708 - __main__ - INFO - Starting Flexible Deadlock Detection System...
2025-06-05 10:20:37,708 - __main__ - INFO - Initializing system components...
2025-06-05 10:20:37,709 - __main__ - INFO - Testing Neo4j connection...
2025-06-05 10:20:39,756 - neo4j_connector - INFO - Neo4j connection test successful
2025-06-05 10:20:39,756 - __main__ - INFO - Fetching graph data from Neo4j...
2025-06-05 10:20:39,761 - neo4j_connector - INFO - Fetched 33 nodes and 37 relationships
2025-06-05 10:20:39,761 - __main__ - INFO - Found 33 nodes and 37 relationships
2025-06-05 10:20:39,761 - __main__ - INFO - Extracting SQL resources from graph data...
2025-06-05 10:20:39,761 - sql_resource_extractor - INFO - Extracting SQL resources from graph data...
2025-06-05 10:20:39,782 - sql_resource_extractor - INFO - Found 20 nodes with SQL operations
2025-06-05 10:20:39,782 - __main__ - INFO - Extracted SQL resources from 20 nodes
2025-06-05 10:20:39,782 - __main__ - INFO - Analyzing parallel execution paths...
2025-06-05 10:20:39,783 - parallel_path_analyzer - INFO - Identifying parallel execution paths...
2025-06-05 10:20:39,783 - parallel_path_analyzer - INFO - Total gateways identified: 34
2025-06-05 10:20:39,783 - parallel_path_analyzer - INFO - Gateway type distribution: {'AND_SPLIT': 5, 'OR_SPLIT': 19, 'UNKNOWN': 2, 'OR_JOIN': 6, 'AND_JOIN': 2}
2025-06-05 10:20:39,783 - parallel_path_analyzer - INFO - Found 32 realistic gateways for parallel analysis
2025-06-05 10:20:39,783 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:20:39,783 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_SPLIT with 2 paths (forward analysis)
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 3 paths (forward analysis)
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_SPLIT with 2 paths (forward analysis)
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - Processing 8 JOIN gateways for backward analysis
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 (OR_JOIN)
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:18 produced 0 scenarios
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 (OR_JOIN)
2025-06-05 10:20:39,784 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:20 produced 0 scenarios
2025-06-05 10:20:39,785 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 (OR_JOIN)
2025-06-05 10:20:39,785 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:20:39,785 - parallel_path_analyzer - INFO - JOIN gateway 4:ec094dfa-f51d-4ef1-9f05-b27651d99188:21 produced 1 scenarios
2025-06-05 10:20:39,787 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 07342615-1358-4549-8c2b-050e4aa10352 (OR_JOIN)
2025-06-05 10:20:39,787 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:20:39,788 - parallel_path_analyzer - INFO - JOIN gateway 07342615-1358-4549-8c2b-050e4aa10352 produced 1 scenarios
2025-06-05 10:20:39,789 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: bcf0cce2-df40-4c87-822b-17ce53163039 (OR_JOIN)
2025-06-05 10:20:39,789 - parallel_path_analyzer - INFO - Found TRULY PARALLEL OR_JOIN with 3 converging paths (backward analysis)
2025-06-05 10:20:39,789 - parallel_path_analyzer - INFO - JOIN gateway bcf0cce2-df40-4c87-822b-17ce53163039 produced 1 scenarios
2025-06-05 10:20:39,790 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d (AND_JOIN)
2025-06-05 10:20:39,790 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Found 2 converging paths with SQL nodes
2025-06-05 10:20:39,790 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:20:39,790 - parallel_path_analyzer - INFO -   Neo4j Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:20:39,790 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Validation result = True
2025-06-05 10:20:39,791 - parallel_path_analyzer - INFO - AND_JOIN 2a5b26ec-0f86-4367-b4e4-11bab697253d: Building scenario with 2 paths
2025-06-05 10:20:39,792 - parallel_path_analyzer - INFO - Found TRULY PARALLEL AND_JOIN with 2 converging paths (backward analysis)
2025-06-05 10:20:39,792 - parallel_path_analyzer - INFO - JOIN gateway 2a5b26ec-0f86-4367-b4e4-11bab697253d produced 1 scenarios
2025-06-05 10:20:39,793 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 23646f5e-579a-4b86-9c09-672bf0e221b6 (OR_JOIN)
2025-06-05 10:20:39,793 - parallel_path_analyzer - INFO - JOIN gateway 23646f5e-579a-4b86-9c09-672bf0e221b6 produced 0 scenarios
2025-06-05 10:20:39,793 - parallel_path_analyzer - INFO - Analyzing JOIN gateway: 389cc933-78d3-4cbf-adae-cdc01615cbe4 (AND_JOIN)
2025-06-05 10:20:39,793 - parallel_path_analyzer - INFO - Neo4j AND_JOIN 389cc933-78d3-4cbf-adae-cdc01615cbe4: Found 1 converging paths with SQL nodes
2025-06-05 10:20:39,793 - parallel_path_analyzer - INFO -   Neo4j Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:29']
2025-06-05 10:20:39,794 - parallel_path_analyzer - INFO - JOIN gateway 389cc933-78d3-4cbf-adae-cdc01615cbe4 produced 0 scenarios
2025-06-05 10:20:39,794 - parallel_path_analyzer - INFO - Found 9 parallel execution scenarios
2025-06-05 10:20:39,794 - __main__ - INFO - Identified 9 parallel execution scenarios
2025-06-05 10:20:39,794 - __main__ - INFO - Running analysis in 'full' mode
2025-06-05 10:20:39,794 - __main__ - INFO - Executing standard deadlock analysis...
2025-06-05 10:20:39,794 - deadlock_detector - INFO - Analyzing deadlocks across 9 parallel scenarios...
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Building wait-for graph from 9 scenarios...
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Scenario types to process: ['OR_SPLIT', 'OR_SPLIT', 'OR_SPLIT', 'AND_SPLIT', 'AND_SPLIT', 'OR_JOIN', 'OR_JOIN', 'OR_JOIN', 'AND_JOIN']
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Processing scenario 1/9: OR_SPLIT
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Processing scenario 2/9: OR_SPLIT
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Processing scenario 3/9: OR_SPLIT
2025-06-05 10:20:39,795 - deadlock_detector - INFO - Analyzing scenario: OR_SPLIT with 2 paths
2025-06-05 10:20:39,795 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:20:39,796 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_SPLIT
2025-06-05 10:20:39,796 - deadlock_detector - INFO - Processing scenario 4/9: AND_SPLIT
2025-06-05 10:20:39,796 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 3 paths
2025-06-05 10:20:39,796 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Approve Purchase Order <-> Complete Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:20:39,796 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Complete Purchase Order <-> Approve Purchase Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:20:39,796 - deadlock_detector - INFO - Found 2 conflicts between paths in AND_SPLIT
2025-06-05 10:20:39,797 - deadlock_detector - INFO - Processing scenario 5/9: AND_SPLIT
2025-06-05 10:20:39,797 - deadlock_detector - INFO - Analyzing scenario: AND_SPLIT with 2 paths
2025-06-05 10:20:39,797 - deadlock_detector - INFO - Processing scenario 6/9: OR_JOIN
2025-06-05 10:20:39,797 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:20:39,797 - deadlock_detector - INFO - Processing scenario 7/9: OR_JOIN
2025-06-05 10:20:39,797 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 2 paths
2025-06-05 10:20:39,797 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Process Standard Order <-> Process Custom Order - WRITE_WRITE_SAME_TABLE
2025-06-05 10:20:39,798 - deadlock_detector - INFO - Found 1 conflicts between paths in OR_JOIN
2025-06-05 10:20:39,798 - deadlock_detector - INFO - Processing scenario 8/9: OR_JOIN
2025-06-05 10:20:39,798 - deadlock_detector - INFO - Analyzing scenario: OR_JOIN with 3 paths
2025-06-05 10:20:39,798 - deadlock_detector - INFO - Processing scenario 9/9: AND_JOIN
2025-06-05 10:20:39,798 - deadlock_detector - INFO - Analyzing scenario: AND_JOIN with 2 paths
2025-06-05 10:20:39,798 - deadlock_detector - INFO - Processing AND_JOIN scenario - Gateway: 2a5b26ec-0f86-4367-b4e4-11bab697253d
2025-06-05 10:20:39,798 - deadlock_detector - INFO -   AND_JOIN Path 1: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:19']
2025-06-05 10:20:39,799 - deadlock_detector - INFO -   AND_JOIN Path 2: 1 SQL nodes - ['4:ec094dfa-f51d-4ef1-9f05-b27651d99188:58']
2025-06-05 10:20:39,799 - deadlock_detector - INFO -   [OK] CONFLICT VALIDATED: Update Inventory Quantity <-> Update Inventory Order Status - WRITE_WRITE_CROSS_TABLE
2025-06-05 10:20:39,799 - deadlock_detector - INFO - Found 1 conflicts between paths in AND_JOIN
2025-06-05 10:20:39,799 - deadlock_detector - INFO - Wait-for graph built with 6 nodes and 6 edges
2025-06-05 10:20:39,799 - deadlock_detector - INFO - Detecting deadlock cycles using Tarjan's algorithm...
2025-06-05 10:20:39,799 - deadlock_detector - INFO - Found 3 potential deadlock cycles
2025-06-05 10:20:39,800 - deadlock_detector - INFO - Deadlock analysis completed. Found 3 potential deadlock cycles
2025-06-05 10:20:39,800 - report_generator - INFO - Generating comprehensive deadlock analysis report...
2025-06-05 10:20:39,802 - report_generator - INFO - Report saved successfully to results\deadlock_analysis_report_20250605_102037.json
2025-06-05 10:20:39,802 - report_generator - INFO - Comprehensive report saved to: results\deadlock_analysis_report_20250605_102037.json
2025-06-05 10:20:39,806 - __main__ - INFO - Deadlock analysis completed successfully.
2025-06-05 10:20:39,806 - __main__ - INFO - Reports saved to: results
2025-06-05 10:20:39,806 - __main__ - INFO - Neo4j connection closed.
